[
  {
    "title": "$:/plugins/danielo515/tiddlypouch",
    "description": "tiddlypouch for TiddlyWiki",
    "author": "Danielo Rodriguez",
    "core-version": ">=5.1.14",
    "list": "readme",
    "version": "0.27.7",
    "released": "Sun, 17 May 2020 15:17:46 GMT",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/danielo515/tiddlypouch/utils/logger.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/utils/logger.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/utils/logger.js\\ntype: application/javascript\\nmodule-type: library\\nA basic logging implementation\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n'use strict';\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nvar Super = require('$:/core/modules/utils/logger.js').Logger;\\n/**\\n* Make a new logger\\n* @class\\n* @param {String} componentName - This will be displayed on the logging messages as header\\n* @param {Object|boolean} debug - A debug config object with debug and verbose booleans or a boolean indicating that debug level is active\\n* @param {boolean} verbose - if verbose debug level is active (used on trace method)\\n*\\n*/\\n\\n\\nfunction Logger(componentName, debug, verbose) {\\n  Super.call(this, componentName);\\n\\n  if (_typeof(debug) === 'object') {\\n    verbose = debug.verbose;\\n    debug = debug.debug;\\n  }\\n\\n  this.isDebug = debug || this.isDebugActive; // prototype overridable\\n\\n  this.isVerbose = verbose;\\n}\\n\\nLogger.prototype = Object.create(Super.prototype);\\nLogger.prototype.constructor = Super;\\n/**\\n * Log only if there is debug enabled\\n * @returns {undefined} returns nothing\\n */\\n\\nLogger.prototype.debug = function () {\\n  if (!this.isDebug) {\\n    return;\\n  }\\n\\n  this.log.apply(this, Array.prototype.slice.call(arguments, 0));\\n};\\n/**\\n * Log only if debug is verbose\\n * @returns {undefined} returns nothing\\n */\\n\\n\\nLogger.prototype.trace = function () {\\n  if (!this.isVerbose) {\\n    return;\\n  }\\n\\n  this.debug.apply(this, Array.prototype.slice.call(arguments, 0));\\n};\\n\\nexports.Logger = Logger;\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/Logger.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/config/SyncFilter\": {\n            \"title\": \"$:/config/SyncFilter\",\n            \"comment\": \"Temprorary workaround until I implement this function in the syncer\",\n            \"text\": \"[is[tiddler]] -[[$:/HistoryList]] -[[$:/Import]] -[[$:/isEncrypted]] -[prefix[$:/status/]] -[prefix[$:/state/]] -[prefix[$:/temp/]] -[prefix[$:/plugins/danielo515/tiddlypouch/]] [[$:/status/UserName]]\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/boot.js\": {\n            \"text\": \"<script>\\n\\\"use strict\\\";\\n\\n(function (window) {\\n  'use strict';\\n  /***** Base TiddlyPouch module creation ****/\\n\\n  var $TPouch = window.$TPouch || Object.create(null);\\n\\n  if ($TPouch.supressBoot) {\\n    /** Allow external JS to avoid boot */\\n    return;\\n  }\\n\\n  $TPouch._configDb = $TPouch._configDb || new PouchDB('__TP_config');\\n  $TPouch.splashScreen = $TPouch.splashScreen || Object.create(null);\\n  /*** The version section is automatically updated by build scripts,  Dont delete the below comment */\\n\\n  $TPouch.VERSION =\\n  /***TPOUCH_VER*/\\n  '0.27.7'\\n  /*TPOUCH_VER***/\\n  ;\\n  var $tw = window.$tw || Object.create(null);\\n  $tw.boot = $tw.boot || Object.create(null);\\n  $tw.boot.suppressBoot = true;\\n  window.$TPouch = $TPouch;\\n  window.$tw = $tw;\\n  /** Creates a new message node to be used on the splashScreen*/\\n\\n  function createSplashMessageNode(message) {\\n    var h1 = document.createElement('h1');\\n    h1.setAttribute('data-text', message);\\n    var text = document.createTextNode(message);\\n    h1.appendChild(text);\\n    return h1;\\n  }\\n\\n  function createSplashScreen(message) {\\n    /* This function waits until document.body exists*/\\n    function tryToAppend(node) {\\n      if (!document.body) {\\n        return setTimeout(tryToAppend.bind(null, node), 1);\\n      }\\n\\n      document.body.appendChild(node, document.body.firstChild);\\n    }\\n\\n    var splash = document.getElementById('TP_splash_screen');\\n\\n    if (splash === null) {\\n      splash = document.createElement('div');\\n      splash.setAttribute('id', 'TP_splash_screen');\\n      splash.appendChild(createSplashMessageNode(message));\\n      tryToAppend(splash);\\n    } else {\\n      splashMessage(message);\\n    }\\n\\n    $TPouch.splashScreen.node = splash;\\n  }\\n  /** Hides the splash screen allowing the cool css animation to execute*/\\n\\n\\n  $TPouch.splashScreen.hide = function hideSplashScreen() {\\n    /** We first set opacity to 0 to allow the css animations kick in\\n     * Two seconds later , when animation has finished\\n     * we set display to none so it does not takes space on the page.\\n     * Display none can not be animated, that's why we use opacity first.\\n    */\\n    $TPouch.splashScreen.node.style.opacity = 0;\\n    setTimeout(function () {\\n      $TPouch.splashScreen.node.style.display = 'none';\\n    }, 2000);\\n  };\\n\\n  $TPouch.splashScreen.showMessage = function splashMessage(message) {\\n    var node = $TPouch.splashScreen.node;\\n    node.replaceChild(createSplashMessageNode(message), node.firstChild);\\n    node.style.display = 'block';\\n    node.style.opacity = 1;\\n  };\\n  /**\\n   * Checks if the current version on the database is lower than the current version\\n   * if so, it deletes all the indexes so they can be recreated\\n   * @param {string} version - The version of TiddlyPouch that the database being updated has\\n   * @param {PouchDB} db - The actual Pouch database that we are updating\\n   * @returns {promise} - promise that fulfills when all the indexes have been processed, removed or failed removing\\n   */\\n\\n\\n  function updater(version, db) {\\n    var documentsToRemove = ['_design/by_type', '_design/skinny_tiddlers', '_design/by_plugin_type', '_design/filtered_replication', '_design/TiddlyPouch', '_design/startup_tiddlers'];\\n\\n    if (version && !(parseInt(version.split('.').join('')) < parseInt($TPouch.VERSION.split('.').join('')))) {\\n      return Promise.resolve();\\n    }\\n\\n    console.log('Starting update process...');\\n    $TPouch.splashScreen.showMessage('Updating database');\\n    return Promise.all(documentsToRemove.map(function (id) {\\n      return db.get(id).then(function (doc) {\\n        console.log('Removing index ', id);\\n        return db.remove(doc);\\n      })[\\\"catch\\\"](console.log.bind(console, 'Error removing ', id, ' which may be totally fine if it did not exist.'));\\n    })).then(function () {\\n      console.log('Update process complete');\\n    });\\n  }\\n\\n  createSplashScreen('Loading');\\n\\n  $TPouch._configDb.get('configuration') // we read the configuration to know which database should be loaded\\n  .then(function (config) {\\n    if (!config.selectedDbId) {\\n      throw new Error('There is no DB selected, nothing to inject');\\n    }\\n    /** Create the default db, it should be wrapped later on the boot proces in a {@link DbStore} */\\n\\n\\n    $TPouch._db = new PouchDB(config.selectedDbId);\\n    var oldVer = config.databases[config.selectedDbId].version;\\n    return updater(oldVer, $TPouch._db).then(function () {\\n      /** After the update process, flag the db with latest version */\\n      config.databases[config.selectedDbId].version = $TPouch.VERSION;\\n      return $TPouch._configDb.put(config);\\n    });\\n  }).then(function () {\\n    return $TPouch._db.query('startup_tiddlers', {\\n      include_docs: true\\n    });\\n  }).then(function (all) {\\n    //Actual docs are contained in the rows array\\n    console.log('Injecting ', all.total_rows, ' startup tiddlers into tw');\\n    var startupTids = all.rows.map(function (row) {\\n      return row.doc.fields;\\n    });\\n    window.$tw.preloadTiddlers = startupTids;\\n  })[\\\"catch\\\"](function (reason) {\\n    // catch any possible error and continue the chain\\n    console.log('Something went wrong during plugin injection ', reason);\\n  }).then(function () {\\n    if ($tw.boot.boot) {\\n      $tw.boot.boot(); // boot when chain completes, even if we got some errors\\n    } else {\\n      console.log('Allowing TW boot itself....');\\n      $tw.boot.suppressBoot = false;\\n    }\\n  });\\n})(window);\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/boot/tpouch-boot.js.map\\n\\n</script>\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/boot.js\",\n            \"tags\": [\n                \"$:/tags/RawMarkup\"\n            ]\n        },\n        \"$:/plugins/danielo515/tiddlypouch/boot.css\": {\n            \"text\": \"<style>\\n#TP_splash_screen {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #FFF;\\n  margin: 0;\\n  font-size: 14px;\\n  -webkit-transition: opacity 2s ease-in-out;\\n  -moz-transition: opacity 2s ease-in-out;\\n  -ms-transition: opacity 2s ease-in-out;\\n  -o-transition: opacity 2s ease-in-out;\\n  transition: opacity 2s ease-in-out; }\\n\\n#TP_splash_screen > h1 {\\n  text-align: center;\\n  color: #CECECE;\\n  font-size: 5.5em;\\n  width: 100%;\\n  position: relative;\\n  word-wrap: break-word;\\n  font-weight: 300;\\n  margin: 0.67em 0;\\n  line-height: 1.2;\\n  font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, \\\"Lucida Grande\\\", \\\"DejaVu Sans\\\", sans-serif;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  -webkit-box-sizing: border-box;\\n  box-sizing: border-box; }\\n\\n@media (min-width: 1200px) {\\n  #TP_splash_screen > h1 {\\n    font-size: 12em; } }\\n\\n#TP_splash_screen > h1:before {\\n  content: attr(data-text);\\n  overflow: hidden;\\n  position: absolute;\\n  max-width: 5.5em;\\n  white-space: nowrap;\\n  color: #93cf93;\\n  animation: loading 6s linear; }\\n\\n@keyframes loading {\\n  0% {\\n    max-width: 0; } }\\n\\n</style>\",\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/boot.css\",\n            \"tags\": [\n                \"$:/tags/RawMarkup\"\n            ]\n        },\n        \"$:/plugins/danielo515/tiddlypouch/config/single-db-config\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/config/single-db-config\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/config/single-db-config\\ntype: application/javascript\\nmodule-type: library\\n\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\n/*global module: false */\\n\\n/*** Exports **********************************/\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nmodule.exports = dbConfig;\\n/***************************** CODE ********************************/\\n\\n/**\\n *\\n * @constructor\\n * @param {String|Object} name  The name of the database. This can also be a complete\\n *                              config object for the new database\\n * @param {Object} remote\\n */\\n\\nfunction dbConfig(name, remote) {\\n  if (_typeof(name) === 'object') {\\n    remote = name.remote;\\n    name = name.name;\\n  }\\n\\n  this.name = name;\\n  this.remote = {};\\n\\n  if (_typeof(remote) === 'object') {\\n    /** We only copy valid values, not the full object */\\n    this.remote.name = remote.name;\\n    this.remote.url = remote.url;\\n    this.remote.username = remote.username;\\n    this.remote.password = remote.password;\\n  }\\n}\\n/**\\n * @return {String} name the name of the database\\n */\\n\\n\\ndbConfig.prototype.getName = function () {\\n  return this.name;\\n};\\n/**\\n * @return {String} remoteName the name this database has on the remote couchdb server\\n */\\n\\n\\ndbConfig.prototype.getRemoteName = function () {\\n  var name = this.remote && this.remote.name;\\n  return name;\\n};\\n/**\\n * @return {Object} config A copy of the current configuration\\n */\\n\\n\\ndbConfig.prototype.getConfig = function () {\\n  return {\\n    name: this.name,\\n    remote: this.remote\\n  };\\n};\\n/**\\n * @param {String} section Optional sub path of the remote server. For example _session\\n * @return {String} URL The url of the remote server. Pointing to section if it is defined\\n */\\n\\n\\ndbConfig.prototype.getUrl = function getUrl(section) {\\n  var URL = this.remote.url;\\n\\n  if (!URL) {\\n    return null;\\n  }\\n\\n  URL = URL.substr(-1) === '/' ? URL : \\\"\\\".concat(URL, \\\"/\\\"); //Make sure it ends with slash\\n\\n  if (section) {\\n    URL += section;\\n  }\\n\\n  return URL;\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/config/single-db-config.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/constants.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/constants.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/constants.js\\ntype: application/javascript\\nmodule-type: library\\n\\nConstants used across the entire plugin.\\nThis may feel trivial, but it is an big advantage:\\n - one single place to see all the relevant tiddlers\\n - one single place to update to change a tiddler name\\n - other plugins/authors just use this constants and don't worry about keeping the names up-to-date\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n'use strict';\\n\\nmodule.exports = {\\n  // ===== EVENTS =====\\n  DELETE_DB: 'tm-pouch-delete-db',\\n  LIST_REVISIONS: 'tm-tp-load-revisions',\\n  LOAD_REVISION: 'tm-tp-load-certain-revision',\\n  CONFIG_SAVED: 'tm-tp-config-saved',\\n  UPDATE_DEBUG: 'tm-TP-config-updateDebug',\\n  UPDATE_SELECTED_DB: 'tm-TP-config-updateSelectedDB',\\n  DB_HAS_BEEN_SELECTED: 'tm-TP-config-selectedDb',\\n  // ===== TIDDLERS =====\\n  SYNC_ICON: '$:/plugins/danielo515/tiddlypouch/ui/sync-flag',\\n  DATABASE_NAMES: '$:/plugins/danielo515/tiddlypouch/config/database_names',\\n  DEBUG_CONFIG: '$:/plugins/danielo515/tiddlypouch/ui/Config',\\n  SELECTED_DATABASE: '$:/plugins/danielo515/tiddlypouch/config/selected_database'\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/constants.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/DbStore.factory\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/DbStore.factory\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/DbStore.factory\\ntype: application/javascript\\nmodule-type: library\\n\\nA factory of DbStores. This factory is responsible of instantiating the DbStores and inject them the required dependecies\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\nmodule.exports = factory;\\n/** The dbStore class should export a function constructor. @see DbStore */\\n\\nvar DbStore = require(\\\"$:/plugins/danielo515/tiddlypouch/databases/DbStore.js\\\");\\n/** This list should be built automatically based on some kind of module system,\\n * but for the moment, just create it manually\\n */\\n\\n\\nvar converters = {\\n  'tiddlers': require(\\\"$:/plugins/danielo515/tiddlypouch/databases/converters/tiddler\\\"),\\n  'plugins': require(\\\"$:/plugins/danielo515/tiddlypouch/databases/converters/plugins\\\")\\n};\\n/**\\n * Factory that instantiates DbStores.\\n *\\n * It is responsible of injecting the tiddler conversion logic into the instantiated database.\\n * Conversion logic is extracted from a list of converter modules.\\n * Each converter should decorate the database with the {@link DbDecorator} interface\\n * @see DbStore\\n *\\n * @param {String} dbName the name of the database to instantiate. It will be created if it does not exist\\n * @param {String} dbType the type of database you want. This determines the conversion logic,\\n *                        so basically this is a converter name.\\n * @param {PouchDB} [dbToWrap] - An already existing database to wrap, instead of being created\\n * @returns {DbStore} a ready to use instance of DbStore class with the conversion logic injected\\n */\\n\\nfunction factory(dbName, dbType, dbToWrap) {\\n  dbType = dbType || 'tiddlers';\\n  var converter = converters[dbType];\\n  var db = new DbStore(dbName, dbToWrap);\\n  return converter.decorate(db);\\n}\\n/**\\n * Should decorate any given {@link DbStore} with the following methods.\\n * Monkey patching is the method used\\n *\\n * @interface DbDecorator\\n */\\n\\n/**\\n *\\n *\\n * @function\\n * @name DbDecorator#_convertToCouch\\n *\\n * @param {Tiddler} tiddler - the tiddler to convert to CouchDB format\\n * @param {object} tiddlerInfo - The metadata about the tiddler that the sync mechanism of tiddlywiki provides.\\n *                               This includes the revision and other metadata related to the tiddler that is not\\n *                               included in the tiddler.\\n * @returns {object} doc - An document object that represents the tiddler. Ready to be inserted into CouchDB\\n */\\n\\n/**\\n * This method should handle any required conversion to create a document id from a tiddler title.\\n * It should be static and have no side effects.\\n * @function\\n * @name DbDecorator#_mangleTitle\\n * @param {String} title - Any tiddler title\\n * @returns {String} title compatible with the destination database\\n */\\n\\n/**\\n * Transforms a pouchd document extracting just the fields that should be\\n * part of the tiddler discarding all the metadata related to PouchDB.\\n * @function\\n * @name DbDecorator#_convertFromCouch\\n * @param {object} doc - A couchdb object containing a tiddler representation inside the fields sub-object\\n * @returns {object} fields ready for being added to a wiki store\\n */\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/DbStore.factory.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/DbStore.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/DbStore.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/DbStore.js\\ntype: application/javascript\\nmodule-type: library\\n\\nManages insertions, extractions, deletions of tiddlers to a database.\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*global PouchDB */\\n\\n/*jslint node: true, browser: true */\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar identity = function identity(x) {\\n  return x;\\n};\\n\\nvar ignoreRevisionFor = ['$:/StoryList'];\\n/***====================== EXPORTS  ========================== */\\n\\n/**\\n * @classdesc Handles the operations related to fetching and saving tiddlers to a database.\\n * it is the PouchDB equivalent to the wiki store.\\n *\\n * It expects some methods to be injected: _convertFromCouch, _convertToCouch, _mangleTitle\\n * such injection is responsibility of the factory that instantiates this objects.\\n *\\n * @see DbStore.factory\\n *\\n * If the database does not exist it will be created\\n * @class\\n * @param {String} dbName The name should match the PouchDB name\\n * @param {PouchDB} [db] An already existing PouchDB database object to wrap .\\n */\\n\\nmodule.exports = /*#__PURE__*/function () {\\n  function DbStore(dbName\\n  /**String */\\n  , db\\n  /**PouchDB db Optional */\\n  ) {\\n    _classCallCheck(this, DbStore);\\n\\n    this.name = dbName;\\n    this._db = db instanceof PouchDB ? db : new PouchDB(dbName);\\n    this.logger = new $TPouch.Logger(\\\"DbStore:\\\".concat(dbName));\\n  }\\n  /***====================== PURE DB METHODS ========================== */\\n\\n  /**\\n   * Creates generic conflict-handler functions.\\n   * The returned function logs a default message to the console in case of conflict,\\n   * otherwise it throws the error so the next catch on the promise chain can handle it\\n   *\\n   * @param {any} message the message the returned handler will log to the console in case of conflict\\n   * @returns {function} handler a function ready to be used inside a catch statement in a promise chain\\n   * @static\\n   */\\n\\n\\n  _createClass(DbStore, [{\\n    key: \\\"_Conflict\\\",\\n    value: function _Conflict(message) {\\n      var self = this;\\n      return function (err) {\\n        if (err.status == 409) {\\n          return self.logger.log(message);\\n        }\\n\\n        throw err;\\n      };\\n    }\\n  }, {\\n    key: \\\"destroy\\\",\\n\\n    /**\\n     * Deletes the current database\\n     * @returns {Promise} A promise that fulfills when the database is destroyed\\n     * and deleted from the list of databases on config\\n     */\\n    value: function destroy() {\\n      return Promise.all([this._db.destroy(), $TPouch.config.removeDatabase(this.name)]);\\n    }\\n  }, {\\n    key: \\\"_makeDesignDocument\\\",\\n\\n    /**\\n     * @function makeDesignDocument\\n     * @param  {String}   name        {description}\\n     * @param  {Function} mapFunction {description}\\n     * @param  {Function} processView An optional function to pre-process the code of the map function. For example injecting more code. Should return an string\\n     * @return {type} {description}\\n     */\\n    value: function _makeDesignDocument(name, mapFunction) {\\n      var processView = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\\n      return {\\n        _id: \\\"_design/\\\".concat(name),\\n        views: _defineProperty({}, name, {\\n          map: processView(mapFunction.toString())\\n        })\\n      };\\n    } // Source: https://pouchdb.com/2014/05/01/secondary-indexes-have-landed-in-pouchdb.html\\n\\n    /**\\n     * Creates an index with the given name. In CouchDB this means a design document\\n     * with a map function that emits the key to be indexed\\n     * @example createIndex('by_type' , function(doc){ emit(doc.fields.type) })\\n     * @public\\n     * @param  {String} name The name of the index, ej: by_type\\n     * @param  {Function} mapFunction A couch map function that will be used to build the index\\n     * @param  {Function} processView An optional function to pre-process the code of the map function. For example injecting more code\\n     * @return {promise} A promise that fulfills when the design document is inserted\\n     */\\n\\n  }, {\\n    key: \\\"createIndex\\\",\\n    value: function createIndex(name, mapFunction, processView) {\\n      var _this = this;\\n\\n      this.logger.debug(\\\"Creating index\\\".concat(name, \\\"...\\\"));\\n      return this._db.put(this._makeDesignDocument(name, mapFunction, processView)).then(function () {\\n        return _this.logger.debug(\\\"Index \\\".concat(name, \\\" created\\\"));\\n      })[\\\"catch\\\"](this._Conflict(\\\"Index \\\".concat(name, \\\" exists already\\\")));\\n    }\\n    /**\\n     * @function replaceIndex\\n     * Replaces an existing index with the provided mapFunction.\\n     * If the index does not exists it will be created.\\n     * We accept a meta-programming function that will have the opportunity to inject code into the map function.\\n     * Note that it is easier to fetch the document, handle the 404 and then insert the document than try to insert, handle the 409 and then try to insert again.\\n     * @param  {String}   name        The name of the index, ej: by_type\\n     * @param  {Function} mapFunction A couch map function that will be used to build the index\\n     * @param  {Function} processView An optional function to pre-process the code of the map function. For example injecting more code. Should return an string\\n     * @return {Promise} {description}\\n     */\\n\\n  }, {\\n    key: \\\"replaceIndex\\\",\\n    value: function replaceIndex(name, mapFunction, processView) {\\n      var _this2 = this;\\n\\n      var index = this._makeDesignDocument(name, mapFunction, processView);\\n\\n      return this._db.get(index._id)[\\\"catch\\\"](function (err) {\\n        // like upsert, if it does not exist create it. Any other error will not be handled\\n        if (err.status !== 404) {\\n          throw err;\\n        }\\n\\n        return {}; // default object for the next promise\\n      }).then(function (_ref) {\\n        var _rev = _ref._rev;\\n        _rev && (index._rev = _rev);\\n        return _this2._db.put(index);\\n      });\\n    }\\n  }, {\\n    key: \\\"_upsert\\\",\\n\\n    /**\\n     * Updates a document on the database if it exists.\\n     * Creates a new document if it does not exist.\\n     * It is a good practice of pouchdb to look for a doc before inserting it.\\n     * If the document has a revision but it is new it will throw a 409 conflict,\\n     * so we look for it and if we get a 404 (not found) we remove the revision\\n     *\\n     * @param {any} document  - It should be a document ready to be inserted,\\n     *                          no conversion from TW format will be performed.\\n     * @returns {promise} A promise that fulfills when the document is upserted\\n     */\\n    value: function _upsert(document) {\\n      var self = this;\\n      return self._db.get(document._id)[\\\"catch\\\"](function (err) {\\n        if (err.name === 'not_found') {\\n          delete document._rev;\\n          return {};\\n        }\\n\\n        throw err;\\n      }).then(function (oldDoc) {\\n        return self._db.put(_objectSpread({}, oldDoc, {}, document));\\n      }).then(function (saveInfo) {\\n        self.logger.debug('Upserted document: ', saveInfo);\\n        return saveInfo;\\n      });\\n    }\\n  }, {\\n    key: \\\"_validateRevision\\\",\\n\\n    /**\\n     * Validates the passed revision according to PouchDB revision format.\\n     * If the revision passes the validation then it is returned.\\n     * If it does not, null is returned\\n     *\\n     * @param {string} rev - the revision to validate\\n     * @static\\n     * @private\\n     * @returns {String|undefined} The revision if it has the correct format, undefined otherwhise\\n     */\\n    value: function _validateRevision(rev) {\\n      if (/\\\\d+-[A-z0-9]*/.test(rev)) {\\n        return rev;\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"addTiddler\\\",\\n\\n    /***============================ TIDDLER STORE METHODS ======== */\\n\\n    /**\\n     * Adds a tiddler to the database.\\n     * It handles all the required conversions for making it compatible with CouchDB or PouchDB\\n     *\\n     * @param {object} tiddler A tiddler fields object. Not a regular tiddler.\\n     * @param {object} options Metadata about this tiddler. Usually provided by the syncer\\n     * @return {promise} fulfills when the tiddler is saved failed to save.\\n     */\\n    value: function addTiddler(tiddler, options) {\\n      var self = this;\\n      var ignoreRev = ignoreRevisionFor.includes(tiddler.fields.title);\\n\\n      var convertedTiddler = this._convertToCouch(tiddler, ignoreRev ? {} : options.tiddlerInfo); // revision is part of provided TW info, so we just omit that\\n\\n\\n      this.logger.debug('Saving ', convertedTiddler);\\n      return self._upsert(convertedTiddler);\\n    }\\n  }, {\\n    key: \\\"deleteTiddler\\\",\\n    value: function deleteTiddler(title) {\\n      var self = this;\\n\\n      var docID = self._mangleTitle(title);\\n\\n      return self._db.get(docID).then(function (doc) {\\n        doc._deleted = true;\\n        return self._db.put(doc);\\n      })[\\\"catch\\\"](self.logger.log.bind(self.logger, \\\"Something went wrong deleting \\\".concat(title)));\\n    }\\n  }, {\\n    key: \\\"getTiddler\\\",\\n    value: function getTiddler(title, revision) {\\n      var self = this;\\n      var query = [self._mangleTitle(title)];\\n      /** Because PouchDB uses the arguments object we can not pass an undefined value as\\n       * second parameter, they try to use it. So to be able to make the query in just one call\\n       * we create an array that dinamycally adds the extra options only if they are required.\\n       * This way, we can call the get function without passing any undefined value\\n       */\\n\\n      if (self._validateRevision(revision)) {\\n        query.push({\\n          rev: revision\\n        });\\n      }\\n\\n      self.logger.debug('Retrieving tiddler ', title, ' from database');\\n      return self._db.get.apply(self._db, query).then(self._convertFromCouch.bind(self))[\\\"catch\\\"](function (err) {\\n        self.logger.log(\\\"Error getting tiddler \\\".concat(title, \\\" from DB\\\"), err);\\n        throw err;\\n      });\\n    }\\n  }, {\\n    key: \\\"getTiddlers\\\",\\n\\n    /**\\n     * Queries an existing index (not controlled) for tiddlers.\\n     *\\n     * @param {String} index          - an existing database index that you want to use for the search\\n     * @param {String} [search_term]  -  it will be used as key search (the first value emited on the map function)\\n     * @param {Boolean} [includeDocs] - Defaults to true. If the documents of the search result should be included or not.\\n     *                                  There are some scenarios where you don't want the document to be included,\\n     *                                  querying for skinny tiddlers for example\\n     * @return {promise} fulfills to an array of already converted tiddlers\\n     */\\n    value: function getTiddlers(index, search_term, includeDocs) {\\n      var self = this;\\n      var queryOptions = {\\n        include_docs: undefined === includeDocs ? true : includeDocs\\n      };\\n\\n      if (search_term) {\\n        queryOptions.key = search_term;\\n      }\\n\\n      return self._db.query(index, queryOptions).then(function (result) {\\n        self.logger.trace('Query to ', index, ' searching for ', search_term, ' : ', result.rows);\\n        return result.rows;\\n      }).then(function (rows) {\\n        /** query Api returns documents in a different format, we have to convert them to the format convertFromCouch expects */\\n        return rows.map(function (doc) {\\n          return doc.doc ? doc.doc : {\\n            // if doc is included just return it or try to make a conversion otherwhise\\n            // the key is missed! maybe provide a conversion function as parameter?\\n            _id: doc.id,\\n            fields: doc.value\\n          };\\n        });\\n      }).then(function (documents) {\\n        return documents.map(self._convertFromCouch.bind(self));\\n      })[\\\"catch\\\"](self.logger.log.bind(self.logger));\\n    }\\n  }, {\\n    key: \\\"getTiddlerRevisions\\\",\\n\\n    /**\\n     * returns the revisions of a given tiddler.\\n     * Only available revisions are returned\\n     * @param {string} title The tiddler's title you want the revisions\\n     * @return {promise} promise that fulfills to an array of revisions\\n     */\\n    value: function getTiddlerRevisions(title) {\\n      return this._db.get(this._mangleTitle(title), {\\n        revs_info: true\\n      }).then(function (document) {\\n        var revisions = document._revs_info.filter(onlyAvailable).map(getRevisionId);\\n\\n        return revisions;\\n      });\\n\\n      function onlyAvailable(rev) {\\n        return rev.status === 'available';\\n      }\\n\\n      function getRevisionId(rev) {\\n        return rev.rev;\\n      }\\n    }\\n  }]);\\n\\n  return DbStore;\\n}();\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/DbStore.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/converter.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/converter.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/converter.js\\ntype: application/javascript\\nmodule-type: library\\n\\nBasic converter. Used by other decorators (AKA converters)\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\n/* global module */\\n\\n/** @namespace {converters} converter */\\n\\n/***====================EXPORTS============================ */\\n\\nmodule.exports.decorate = Converter;\\n/**\\n * Base converter decorator\\n *\\n * @param {any} db - database to decorate with this converter methods\\n * @returns {any} db - the same db but decorated with the methods of this converter\\n */\\n\\nfunction Converter(db) {\\n  /***===================== CONVERSIONS BETWEEN TW AND PouchDB ============= */\\n\\n  /**\\n  * CouchDB does not like document IDs starting with '_'.\\n  * Convert leading '_' to '%5f' and leading '%' to '%25'\\n  * Only used to compute _id / URL for a tiddler. Does not affect 'title' field.\\n  * @param {String} title The title of the tiddler to mangle\\n  * @return {String} The same title ready to be inserted into PouchDB/couchdb\\n  */\\n  db._mangleTitle = function mangleTitle(title) {\\n    if (title.length == 0) {\\n      return title;\\n    }\\n\\n    var firstChar = title.charAt(0);\\n    var restOfIt = title.substring(1);\\n\\n    if (firstChar === '_') {\\n      return \\\"%5f\\\".concat(restOfIt);\\n    } else if (firstChar === '%') {\\n      return \\\"%25\\\".concat(restOfIt);\\n    } else {\\n      return title;\\n    }\\n  };\\n\\n  return db;\\n}\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/converter.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/converters/plugins\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/converters/plugins\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/converters/plugins\\ntype: application/javascript\\nmodule-type: library\\n\\nDecorator that convert tiddlywiki plugins into PouchDB documents\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n\\n/* global module */\\n\\n/** @namespace {converters} plugins.converter */\\n\\nmodule.exports.decorate = pluginConverter;\\n/***====================== plugins conversor dependency  ========================== */\\n\\nvar BaseConverter = require(\\\"$:/plugins/danielo515/tiddlypouch/databases/converter.js\\\");\\n/**\\n * Injects methods to handle conversions between regular TW tiddlers and CouchDB.\\n * getSkinnyTiddlers is not implemented because it does not makes sense on the plugins database\\n *\\n * @param {DbStore} db - a database instance where methods should be injected\\n * @return {DbStore} The same db with the methods already injected\\n */\\n\\n\\nfunction pluginConverter(db) {\\n  /***===================== CONVERSIONS BETWEEN TW AND PouchDB ============= */\\n\\n  /** decorate with the base methods */\\n  db = BaseConverter.decorate(db);\\n  /**\\n   * Copy all fields to \\\"fields\\\" except the \\\"revision\\\" field.\\n   * See also: TiddlyWebAdaptor.prototype.convertTiddlerToTiddlyWebFormat.\\n   *\\n   * @param {Tiddler} tiddler - the tiddler to convert to CouchDB format\\n   * @param {object} tiddlerInfo - The metadata about the tiddler that the sync mechanism of tiddlywiki provides.\\n   *                               This includes the revision and other metadata related to the tiddler that is not\\n   *                               included in the tiddler.\\n   * @static\\n   * @private\\n   * @returns {object} doc - An document object that represents the tiddler. Ready to be inserted into CouchDB\\n   */\\n\\n  db._convertToCouch = function convertToCouch(tiddler) {\\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n        adaptorInfo = _ref.adaptorInfo;\\n\\n    var result = {\\n      fields: {}\\n    };\\n\\n    if (tiddler) {\\n      $tw.utils.each(tiddler.fields, function (element, field) {\\n        if (field === 'revision') {\\n          return;\\n        } // Skip revision\\n        // Convert fields to string\\n\\n\\n        result.fields[field] = tiddler.getFieldString(field);\\n      }); // tags must stay as array, so fix it\\n\\n      result.fields.tags = tiddler.fields.tags;\\n    } // Default the content type\\n\\n\\n    result.fields.type = result.fields.type || 'text/vnd.tiddlywiki';\\n    result._id = this._mangleTitle(tiddler.fields.title);\\n\\n    if (adaptorInfo && adaptorInfo._rev && this._validateRevision(adaptorInfo._rev)) {\\n      result._rev = adaptorInfo._rev;\\n    }\\n\\n    return result;\\n  };\\n  /**\\n       * Dummy method. TW should never try to load a plugin from the sync adaptor.\\n       * Even if TW tries to lazy-load a plugin (because any error handling the tiddler)\\n       * the router will route that request to the default DbStore\\n       * @return {null} nothing is returned\\n       */\\n\\n\\n  db._convertFromCouch = function convertFromCouch() {\\n    var err = new Error('Tiddlers should not be loaded from the plugins database!');\\n    err.status = 403;\\n    throw err;\\n  };\\n  /**\\n       * Dummy method.\\n       * Tiddlers should never be deleted through the plugins DbStore\\n       * Even if TW tries to delete a plugin (because any error handling the tiddler)\\n       * the router will route that request to the default DbStore\\n       * @return {null} nothing is returned\\n       */\\n\\n\\n  db.deleteTiddler = function () {\\n    var err = new Error('Tiddlers should not be deleted through the plugins database!');\\n    err.status = 403;\\n    throw err;\\n  };\\n\\n  return db;\\n}\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/converters/plugins.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/converters/tiddler\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/converters/tiddler\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/converters/tiddler\\ntype: application/javascript\\nmodule-type: library\\n\\na conversor that makes tiddlers compatible with pouchdb. This injects the required methods into the db store to handle conversions between regular tiddlers and couchdb\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n\\n/* global module */\\n\\n/** @namespace {converters} tiddler.converter */\\n\\nmodule.exports.decorate = tiddlerConverter;\\n/***====================== Tiddler conversor dependency  ========================== */\\n\\nvar BaseConverter = require(\\\"$:/plugins/danielo515/tiddlypouch/databases/converter.js\\\");\\n/**\\n * Injects methods to handle conversions between regular TW tiddlers and CouchDB\\n *\\n * @param {DbStore} db a database instance where methods should be injected\\n * @return {DbStore} The same db with the methods already injected\\n */\\n\\n\\nfunction tiddlerConverter(db) {\\n  /***===================== CONVERSIONS BETWEEN TW AND PouchDB ============= */\\n  db = BaseConverter.decorate(db);\\n  /**\\n   * Copy all fields to \\\"fields\\\" sub-object except for the \\\"revision\\\" field.\\n   * See also: TiddlyWebAdaptor.prototype.convertTiddlerToTiddlyWebFormat.\\n   *\\n   * @param {Tiddler} tiddler - the tiddler to convert to CouchDB format\\n   * @param {object} tiddlerInfo - The metadata about the tiddler that the sync mechanism of tiddlywiki provides.\\n   *                               This includes the revision and other metadata related to the tiddler that is not\\n   *                               included in the tiddler.\\n   * @static\\n   * @private\\n   * @returns {object} doc - An document object that represents the tiddler. Ready to be inserted into CouchDB\\n   */\\n\\n  db._convertToCouch = function convertToCouch(tiddler) {\\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n        adaptorInfo = _ref.adaptorInfo;\\n\\n    var result = {\\n      fields: {}\\n    };\\n\\n    if (tiddler) {\\n      $tw.utils.each(tiddler.fields, function (element, title\\n      /* , object */\\n      ) {\\n        if (title === 'revision') {\\n          /* do not store revision as a field */\\n          return;\\n        }\\n\\n        if (title === '_attachments' && !tiddler.isDraft()) {\\n          //Since the draft and the original tiddler are not the same document\\n          //the draft does not has the attachments\\n          result._attachments = element; //attachments should be stored out of fields object\\n\\n          return;\\n        } // Convert fields to string\\n\\n\\n        result.fields[title] = tiddler.getFieldString(title);\\n      }); // tags must stay as array, so fix it\\n\\n      result.fields.tags = tiddler.fields.tags;\\n    } // Default the content type\\n\\n\\n    result.fields.type = result.fields.type || 'text/vnd.tiddlywiki';\\n    result._id = this._mangleTitle(tiddler.fields.title);\\n\\n    if (adaptorInfo && adaptorInfo._rev && this._validateRevision(adaptorInfo._rev)) {\\n      result._rev = adaptorInfo._rev;\\n    }\\n\\n    return result;\\n  };\\n  /**\\n       * Transforms a pouchd document extracting just the fields that should be\\n       * part of the tiddler discarding all the metadata related to PouchDB.\\n       * For this version just copy all fields across except _rev and _id\\n       * @static\\n       * @param {object} doc - A couchdb object containing a tiddler representation inside the fields sub-object\\n       * @returns {object} fields ready for being added to a wiki store\\n       */\\n\\n\\n  db._convertFromCouch = function convertFromCouch(doc) {\\n    var result = {};\\n    this.logger && this.logger.debug('Converting from ', doc); // Transfer the fields, pulling down the `fields` hashmap\\n\\n    $tw.utils.each(doc, function (element, field\\n    /* , obj */\\n    ) {\\n      if (field === 'fields') {\\n        $tw.utils.each(element, function (element, subTitle\\n        /* , obj */\\n        ) {\\n          result[subTitle] = element;\\n        });\\n      } else if (field === '_id' || field === '_rev') {\\n        /* skip these */\\n      } else {\\n        result[field] = doc[field];\\n      }\\n    });\\n    /* If the doc has a revision field use it.\\n          Sometimes the revision field does not exists, for example, some indexes do not emit it, like the skinny_tiddlers index\\n          This fixes #66*/\\n\\n    doc._rev && (result.revision = doc._rev); //console.log(\\\"Conversion result \\\", result);\\n\\n    return result;\\n  };\\n  /**\\n  * Returns an array of skinny tiddlers (tiddlers withouth text field)\\n  * They are converted from CouchDB documents to TW tiddlers.\\n  * It requires that a skinny_tiddlers view exists on the database.\\n  * Such index is created on the startup module startup-pouch, wich is probably a bad practice\\n  * @return {promise} Skinnytiddlers a promise that fulfills to an array of skinny tiddlers\\n  */\\n\\n\\n  db.getSkinnyTiddlers = function (_ref2) {\\n    var fatTiddlers = _ref2.fatTiddlers;\\n    return this.getTiddlers('skinny_tiddlers', null, fatTiddlers);\\n  };\\n\\n  return db;\\n}\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/converters/tiddler.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/router.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/router.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/router.js\\ntype: application/javascript\\nmodule-type: library\\n\\nRoutes tiddlers between databases. What it actually does is return the destination database for a given tiddler.\\nIt is the responsibility of the entity that is requesting the routing to act on that destination.\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\n/***====================== EXPORTS  ========================== */\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nmodule.exports = DbRouter;\\n/***====================== DEFAULT ROUTE  ========================== */\\n\\nfunction defaultRouter()\\n/*tiddler*/\\n{\\n  if (this.destinations[\\\"default\\\"]) {\\n    return 'default';\\n  }\\n\\n  throw new Error('There is no default route set!');\\n}\\n\\nvar defaultRoute = {\\n  name: 'default',\\n  canRoute: function canRoute() {\\n    return true;\\n  },\\n  route: defaultRouter\\n};\\n/**\\n * Route interface.\\n * Routes used with the {@link DbRouter} class should implement this interface.\\n * All route methods are called with their `this` context pointing to the DbRouter instance they belong to\\n *\\n * @interface Route\\n */\\n\\n/**\\n *\\n *\\n * @function\\n * @name Route#canRoute\\n * @param {object} Tiddler - The tiddler to be routed\\n * @returns {boolean} true if this route is capable of routing the given tiddler. False otherwhise\\n */\\n\\n/**\\n *\\n *\\n * @function\\n * @name Route#route\\n * @param {object} Tiddler - The tiddler to be routed\\n * @param {object} destinations - The hasmap of destinations that the current @DbRouter has\\n * @returns {string} The name of the destination database. Will be used by @DbRouter to find it on the map of destinations\\n */\\n\\n/**\\n *\\n * Creates a new instance of the databases router.\\n * It is responsible of returning a valid db destination for a given tiddler.\\n * The caller should know what to do with the returned database, it is out of the scope of this Class.\\n * @class\\n *\\n * @param {any} defaultDb - The database used as fallback if there is no route that can route the current tiddler\\n * @return {null} This should be called with the new operator.\\n */\\n\\nfunction DbRouter(defaultDb) {\\n  this.destinations = {\\n    'default': defaultDb\\n  };\\n  this.routes = [defaultRoute];\\n}\\n/**\\n * Factory method for instantiating constructors\\n * @name DbRouter#createRouter\\n * @static\\n */\\n\\n\\nDbRouter.createRouter = function (defaultDb) {\\n  return new DbRouter(defaultDb);\\n};\\n/**\\n * Adds a route at the ond of the routes array.\\n * It checks that the route conforms with the required API (AKA interface)\\n * @param {object} route - The route to add to the list of routes. Should implement the  {@link Route} interface\\n * @return {DbRouter} - a reference to the current router for method chaining.\\n */\\n\\n\\nDbRouter.prototype.addRoute = function (route) {\\n  if (_typeof(route) === 'object' && typeof route.canRoute === 'function' && typeof route.route === 'function') {\\n    this.routes.push(route);\\n    return this;\\n  }\\n\\n  var err = new Error('Invalid route. Routes should include \\\"canRoute\\\" and \\\"route\\\" methods');\\n  throw err;\\n};\\n/**\\n * Adds a destination to the map of destinations\\n * @param {any} database - A database instance\\n * @param {string} name - The name the database will have in the destinations map. It can override any existing destination.\\n * @return {DbRouter} a reference to the current router for method chaining\\n */\\n\\n\\nDbRouter.prototype.addDestination = function (name, database) {\\n  this.destinations[name] = database;\\n  return this;\\n};\\n\\nDbRouter.prototype.findRoute = function (tiddler) {\\n  for (var i = this.routes.length - 1; i > -1; --i) {\\n    var route = this.routes[i];\\n\\n    if (route.canRoute.call(this, tiddler)) {\\n      return route;\\n    }\\n  }\\n};\\n\\nDbRouter.prototype.route = function (tiddler) {\\n  var route = this.findRoute(tiddler);\\n  var dest = route.route.call(this, tiddler);\\n  return this.destinations[dest];\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/router.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/databases/routes\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/databases/routes\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/databases/routes\\ntype: application/javascript\\nmodule-type: library\\n\\nsome routes for the DbRouter class\\n\\n@preserve\\n\\n\\\\*/\\n'use strict';\\n/*jslint node: true, browser: true */\\n\\nmodule.exports.plugins = {\\n  name: 'plugins',\\n  route: function route()\\n  /*tiddler */\\n  {\\n    return '__TP_plugins';\\n  },\\n  canRoute: function canRoute(tiddler) {\\n    return tiddler && tiddler.isPlugin && tiddler.isPlugin();\\n  }\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/databases/routes.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"/Users/danielo/mega/programacion/tiddlywiki/tiddlypouch/dist/danielo515/tiddlypouch/global.d.js\": {\n            \"title\": \"/Users/danielo/mega/programacion/tiddlywiki/tiddlypouch/dist/danielo515/tiddlypouch/global.d.js\",\n            \"text\": \"\\\"use strict\\\";\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/global.d.js.map\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/images/revisions\": {\n            \"text\": \"<svg class=\\\"tc-image-file tc-image-button\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"-12 0 128 128\\\">\\n <g>\\n  <path stroke-opacity=\\\"0\\\" id=\\\"svg_18\\\" d=\\\"m8,125.96423l84,1l2,-95l-25,-25l-60,2l-1,117z\\\" stroke-linecap=\\\"square\\\" stroke-linejoin=\\\"round\\\" stroke-dasharray=\\\"null\\\" stroke-width=\\\"4\\\" stroke=\\\"#000000\\\"/>\\n  <g id=\\\"svg_1\\\" fill-rule=\\\"nonzero\\\">\\n   <path d=\\\"m98.96811,33.5l0.03189,0l0,89.49908c0,4.41879 -3.58089,8.00092 -7.99925,8.00092l-80.0015,0c-4.41787,0 -7.99925,-3.58231 -7.99925,-8.00092l0,-111.99816c0,-4.41879 3.58089,-8.00092 7.99925,-8.00092l57.00075,0l0,0.02018c2.15899,-0.09171 4.34822,0.6869 5.99825,2.33693l22.62693,22.62693c1.5265,1.5265 2.30776,3.5158 2.34293,5.51596l0,0zm-30.96811,-22.5l-57,0l0,112l80,0l0,-89.5l-14.99965,0c-4.41847,0 -8.00035,-3.57837 -8.00035,-8.00035l0,-14.49965z\\\" id=\\\"svg_2\\\" />\\n   <text stroke-opacity=\\\"0\\\" fill=\\\"#ffffff\\\" x=\\\"43.25633\\\" y=\\\"54.82153\\\" id=\\\"svg_9\\\" font-size=\\\"24\\\" font-family=\\\"Sans-serif\\\" text-anchor=\\\"middle\\\" xml:space=\\\"preserve\\\" transform=\\\"matrix(3.5430981263433354,0,0,3.1603711640014467,-102.24349149601478,-63.365374592008266) \\\" stroke=\\\"#000000\\\" stroke-linejoin=\\\"round\\\" stroke-linecap=\\\"round\\\" font-weight=\\\"bold\\\">R</text>\\n   <rect stroke=\\\"#000000\\\" stroke-opacity=\\\"0\\\" fill=\\\"#ffffff\\\" x=\\\"19\\\" y=\\\"39\\\" width=\\\"64\\\" height=\\\"8\\\" rx=\\\"4\\\" id=\\\"svg_3\\\"/>\\n   <rect stroke-opacity=\\\"0\\\" stroke=\\\"#000000\\\" fill=\\\"#ffffff\\\" x=\\\"19\\\" y=\\\"23\\\" width=\\\"40\\\" height=\\\"8\\\" rx=\\\"4\\\" id=\\\"svg_8\\\"/>\\n  </g>\\n </g>\\n</svg>\",\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/images/revisions\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/images/cloud-error\": {\n            \"text\": \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" x=\\\"0\\\" y=\\\"0\\\"\\n    width=\\\"23\\\" height=\\\"23\\\" viewBox=\\\"0 0 512 512\\\" enable-background=\\\"new 0 0 512 512\\\"\\n    xml:space=\\\"preserve\\\">\\n<path d=\\\"M446.3 208.8C447 203.3 448 197.8 448 192c0-70.7-57.3-128-128-128 -41.8 0-78.6 20.3-101.9 51.4C209.7 113.3 201 112 192 112c-61.9 0-112 50.1-112 112 0 1.8 0.4 3.3 0.5 5.1C34.1 242.7 0 285.2 0 336c0 61.9 50.1 112 112 112h272c70.7 0 128-57.3 128-128C512 272.1 485.3 230.8 446.3 208.8zM346.5 333.3l-45.2 45.3L256 333.3l-45.2 45.3 -45.3-45.2L210.8 288l-45.3-45.2 45.3-45.2L256 242.8l45.3-45.2 45.3 45.3L301.3 288 346.5 333.3z\\\"/>\\n</svg>\",\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/images/cloud-error\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/images/cloud-ok\": {\n            \"text\": \"<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 512 512\\\" enable-background=\\\"new 0 0 512 512\\\" xml:space=\\\"preserve\\\">\\n<path d=\\\"M319.99,64.012c-41.799,0-78.862,20.378-102.26,51.478-8.3011-2.0992-16.739-3.4783-25.739-3.4783-61.901,0-112,50.1-112,112,0,1.8009-0.08904,3.7652,0,5.5652-46.401,13.6-80,55.635-80,106.43,0,61.9,50.099,112,112,112h272c70.701,0,128-57.3,128-128,0-47.9-27.086-88.609-66.087-110.61,0.71235-5.5,2.0858-11.591,2.0858-17.391,0-70.7-57.299-128-128-128zm79.304,81.391c5.2538-0.001,9.9054,2.1682,13.913,6.2609,7.9992,8.1706,8.0168,21.029,0,29.217l-198.94,203.83c-4.0067,4.0927-9.3542,6.2604-14.609,6.2609-5.2609,0.002-10.594-2.1615-14.609-6.2609l-86.953-88.36c-8.0375-8.2098-8.0155-21.726,0-29.913,7.9992-8.1706,20.498-8.196,28.522,0l73.043,73.739,185.04-188.52c4.0063-4.0922,9.3549-6.2598,14.609-6.2609z\\\"/>\\n</svg>\\n\\n\",\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/images/cloud-ok\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/images/cloud-spinning\": {\n            \"text\": \"<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 512 512\\\" enable-background=\\\"new 0 0 512 512\\\" xml:space=\\\"preserve\\\">\\n<path d=\\\"M446.313,208.813C447.031,203.25,448,197.75,448,192c0-70.688-57.281-128-128-128c-41.813,0-78.594,20.344-101.938,51.375\\n\\tC209.656,113.344,201,112,192,112c-61.875,0-112,50.125-112,112c0,1.75,0.438,3.313,0.5,5.063C34.094,242.719,0,285.156,0,336\\n\\tc0,61.875,50.125,112,112,112h272c70.719,0,128-57.281,128-128C512,272.063,485.344,230.75,446.313,208.813z M128,288h32\\n\\tc0-52.938,43.063-96,96-96c19,0,37.094,5.625,52.344,15.531l-19.438,25.906c-9.766-5.875-21-9.438-32.906-9.438\\n\\tc-35.297,0-64,28.688-64,64h32l-48,64L128,288z M352,288c0,52.938-43.063,96-96,96c-19,0-37.078-5.625-52.359-15.531l19.438-25.906\\n\\tC232.859,348.438,244.094,352,256,352c35.281,0,64-28.688,64-64h-32l48-64l48,64H352z\\\"/>\\n</svg>\\n\",\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/images/cloud-spinning\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/pouchadaptor.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/pouchadaptor.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/pouchadaptor.js\\ntype: application/javascript\\nmodule-type: syncadaptor\\n\\nA sync adaptor module for synchronising with local PouchDB\\n\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n\\n/*global $tw: false, XMLHttpRequest: false */\\n'use strict';\\n/**\\n * Creates the pouch sync adaptor\\n * @constructor\\n * @param {Object} options TODO:document properly\\n */\\n\\nfunction PouchAdaptor(options) {\\n  this.wiki = options.wiki;\\n  var Debug = $TPouch.config.debug;\\n  this.logger = new $TPouch.Logger('PouchAdaptor', Debug.isActive(), Debug.isVerbose());\\n\\n  this.sessionUrl = function () {\\n    return $TPouch.config.currentDB.getUrl('_session');\\n  }; // Check it! not store it, lazy evaluation man!\\n  //this.readConfig()\\n\\n}\\n/**\\n * Copied from TiddlyWiki5 core/modules/utils/dom/http.js to add support for xhr.withCredentials\\n * @argument {Object} options Options to be used on the request\\n * @argument {String} [options.type] Which verb to use (GET,POST,PUT,DELETE)\\n * @argument {Bool} [options.withCredentials] Use with credentials option on the request\\n * @argument {Object|String} [options.data] Data to be included as form data of the request\\n * @returns {Promise} resolves if the returned status is 200,201 or 204, reject otherwise\\n */\\n\\n\\nfunction httpRequest(options) {\\n  var type = options.type || 'GET',\\n      headers = options.headers || {\\n    accept: 'application/json'\\n  },\\n      request = new XMLHttpRequest(),\\n      data = '',\\n      results; // Massage the data hashmap into a string\\n\\n  if (options.data) {\\n    if (typeof options.data === 'string') {\\n      // Already a string\\n      data = options.data;\\n    } else {\\n      // A hashmap of strings\\n      results = [];\\n      $tw.utils.each(options.data, function (dataItem, dataItemTitle) {\\n        results.push(\\\"\\\".concat(dataItemTitle, \\\"=\\\").concat(encodeURIComponent(dataItem)));\\n      });\\n      data = results.join('&');\\n    }\\n  } // for CORS if required\\n\\n\\n  if (options.withCredentials) {\\n    request.withCredentials = true;\\n  }\\n\\n  return new Promise(function (resolve, reject) {\\n    // Set up the state change handler\\n    request.onreadystatechange = function () {\\n      if (this.readyState === 4) {\\n        if (this.status === 200 || this.status === 201 || this.status === 204) {\\n          // Success!\\n          return resolve(this.responseText);\\n        } // Something went wrong\\n\\n\\n        return reject(\\\"XMLHttpRequest error code: \\\".concat(this.status));\\n      }\\n    }; // Make the request\\n\\n\\n    request.open(type, options.url, true);\\n\\n    if (headers) {\\n      $tw.utils.each(headers, function (header, headerTitle) {\\n        request.setRequestHeader(headerTitle, header);\\n      });\\n    }\\n\\n    if (data && !$tw.utils.hop(headers, 'Content-type')) {\\n      request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');\\n    }\\n\\n    request.send(data);\\n  });\\n}\\n/*****************************************************\\n ****** Tiddlywiki required methods\\n *****************************************************/\\n\\n\\nPouchAdaptor.prototype.getStatus = function (callback) {\\n  var self = this;\\n\\n  if (!self.sessionUrl()) {\\n    return callback(null, false, 'NON-AUTHENTICATED');\\n  }\\n\\n  return httpRequest({\\n    url: self.sessionUrl(),\\n    withCredentials: true\\n  }).then(function (data) {\\n    var json = null;\\n    var isLoggedIn = false;\\n    var username = null;\\n\\n    try {\\n      json = JSON.parse(data);\\n    } catch (e) {}\\n\\n    if (json && json.userCtx) {\\n      username = json.userCtx.name;\\n      isLoggedIn = username !== null;\\n\\n      if (!isLoggedIn && json.userCtx.roles.length == 1 && json.userCtx.roles[0] === '_admin') {\\n        // admin party mode\\n        self.logger.debug('Warning! Server is on admin party mode!');\\n        isLoggedIn = true;\\n      }\\n    } // If we are logged but there is no onlineDB means that there is a cookie\\n    // We have to create the database which will pick up the cookie.\\n    // TW will not call the login method if we are already logged in, even if the user clicks on login.\\n\\n\\n    if (isLoggedIn && !$TPouch.onlineDB) {\\n      $TPouch.onlineDB = $TPouch.newOnlineDB();\\n      $TPouch.startSync($TPouch.onlineDB);\\n    }\\n\\n    callback(null, isLoggedIn, username);\\n  })[\\\"catch\\\"](function (err) {\\n    self.logger.debug('Error during login phase', err); // In case of error, just flag us as non auth\\n\\n    return callback(null, false, 'NON-AUTHENTICATED');\\n  });\\n};\\n\\nPouchAdaptor.prototype.login = function (username, password, callback) {\\n  var self = this;\\n  var logger = this.logger;\\n  logger.log('About to log in...');\\n  return httpRequest({\\n    type: 'POST',\\n    url: self.sessionUrl(),\\n    withCredentials: true,\\n    data: {\\n      name: username,\\n      password: password\\n    }\\n  }).then(function () {\\n    logger.log('Login succeed');\\n    callback();\\n  })[\\\"catch\\\"](function (err) {\\n    logger.log('Login failed', err);\\n    logger.alert('Login failed');\\n    callback(err);\\n  });\\n};\\n\\nPouchAdaptor.prototype.logout = function (callback) {\\n  var self = this;\\n  var options = {\\n    url: self.sessionUrl(),\\n    type: 'DELETE',\\n    withCredentials: true\\n  };\\n  return httpRequest(options).then(function () {\\n    return callback();\\n  }) // callback with no arguments, important!\\n  [\\\"catch\\\"](callback);\\n};\\n\\nPouchAdaptor.prototype.getTiddlerInfo = function (tiddler) {\\n  return {\\n    _rev: tiddler ? tiddler.fields.revision : 0\\n  };\\n};\\n/**\\n * Returns an array of skinny tiddlers (tiddlers withouth text field)\\n * @param {function} callback callback to call with the converted tiddlers\\n * @return {promise} Skinnytiddlers a promise that fulfills to an array of skinny tiddlers\\n */\\n\\n\\nPouchAdaptor.prototype.getSkinnyTiddlers = function (callback) {\\n  var fatTiddlers = $TPouch.config.useFatTiddlers();\\n  $TPouch.database.getSkinnyTiddlers({\\n    fatTiddlers: fatTiddlers\\n  }).then(callback.bind(null, null))[\\\"catch\\\"](callback);\\n};\\n/**\\n * Saves a tiddler to the current db store\\n * @param  {Tiddler} tiddler - instance of $tw.Tiddler to be converted\\n * @param  {function} callback - the callback that should be called when the operation completes\\n * @param  {object} options - the options that the syncer provides, for example tiddlerInfo metadata\\n * @return {undefined} this does not returns anything\\n */\\n\\n\\nPouchAdaptor.prototype.saveTiddler = function (tiddler, callback) {\\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\\n    tiddlerInfo: {}\\n  };\\n  this.logger.trace('Tiddler info ', options.tiddlerInfo);\\n  $TPouch.router.route(tiddler).addTiddler(tiddler, options).then(function (saveInfo) {\\n    callback(null, {\\n      _rev: saveInfo.rev\\n    }, saveInfo.rev);\\n  })[\\\"catch\\\"](callback);\\n};\\n\\nPouchAdaptor.prototype.loadTiddler = function (title, callback) {\\n  $TPouch.database.getTiddler(title).then(callback.bind(null, null)) // callback with null as error\\n  [\\\"catch\\\"](callback);\\n};\\n\\nPouchAdaptor.prototype.deleteTiddler = function (title, callback, options) {\\n  if (!options.tiddlerInfo || !options.tiddlerInfo.adaptorInfo || typeof options.tiddlerInfo.adaptorInfo._rev == 'undefined') {\\n    /* not on server, just return OK */\\n    callback(null);\\n  }\\n\\n  $TPouch.database.deleteTiddler(title).then(function () {\\n    return callback();\\n  })[\\\"catch\\\"](callback);\\n};\\n\\nPouchAdaptor.prototype.isReady = function () {\\n  // Since pouchdb handles the sync to the server we declare ourselves always ready.\\n  return true;\\n};\\n\\nif ($tw.browser && $TPouch.database) {\\n  /*Only works if we are on browser and there is a database*/\\n  exports.adaptorClass = PouchAdaptor;\\n}\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/pouchdbadaptor.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"syncadaptor\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/readme\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/readme\",\n            \"text\": \"This is tiddlypouch plugin for [[TiddlyWiki|tiddlywiki.com]].\\nThis plugin uses PouchDB library to provide a store for your tiddlers. \\nTiddlers are saved to the built-in database of your browser. It is also possible to setup a remote\\ndatabase and make tiddlypouch sync your local database with the remote one! This allows you very\\ninteresting workflows like ''working offline'' and syn back to the server when you come back online.\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/savers/DownloadCurrentDB\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/savers/DownloadCurrentDB\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/savers/DownloadCurrentDB\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves all the tiddlers on the current database as JSON\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false  */\\n'use strict';\\n\\nvar saveStartNotification = '$:/language/TiddlyPouch/Notifications/Save/Starting';\\n/**\\n * @constructor {type} DownloadCurrentDB\\n*  Select the appropriate saver module and set it up\\n*/\\n\\nfunction DownloadCurrentDB(wiki) {\\n  this.wiki = wiki;\\n}\\n\\nDownloadCurrentDB.prototype.save = function ()\\n/**text, method, callback, options  */\\n{\\n  if ($tw.syncer.isDirty()) {\\n    // If the syncer has not finished her job, we display a message and defer the save for one second...\\n    $tw.notifier.display(saveStartNotification);\\n    window.setTimeout($tw.rootWidget.dispatchEvent.bind($tw.rootWidget), 1000, {\\n      type: 'tm-save-wiki'\\n    });\\n    /**Stop other savers from trying to download the wiki */\\n\\n    return true;\\n  } // if the syncer has finished then the wiki is ready to be downloaded, we return false so other module can handle the actual save.\\n\\n\\n  return false;\\n};\\n/**\\n* Information about this saver\\n*/\\n\\n\\nDownloadCurrentDB.prototype.info = {\\n  name: 'Download current db',\\n  priority: 100,\\n  capabilities: ['save']\\n};\\n/**\\n* Static method that returns true if this saver is capable of working\\n* @param {$tw.wiki} wiki wiki instance of the currently active tiddlywiki\\n*/\\n\\nexports.canSave = function ()\\n/*wiki */\\n{\\n  return $TPouch.database !== undefined;\\n};\\n/**\\n* Create an instance of this saver\\n*/\\n\\n\\nexports.create = function (wiki) {\\n  return new DownloadCurrentDB(wiki);\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/savers/db-saver.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"saver\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/startup/remove-splash.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/startup/remove-splash.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/startup/remove-splash.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nThe only purpose of this startup module is removing the splash screen.\\nWe do it on a startup module that is executed as later as possible on the\\nboot process, so we remove the loading message when the wiki has loaded fully,\\nand not before.\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n'use strict'; // Export name and synchronous status\\n\\nexports.name = 'TiddlyPouch-remove-splash';\\nexports.after = ['startup'];\\nexports.platforms = ['browser'];\\nexports.synchronous = true;\\n/**\\n * @module config-startup\\n */\\n\\nexports.startup = function () {\\n  $TPouch.splashScreen.hide();\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/startup/remove-splash.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/startup/config.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/startup/config.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/startup/config.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nModule responsible of managing the config.\\nCreates and reads the config database.\\nProvides an interface to the configurations (get, set, update)\\nConfiguration should be immutable and require a reboot to become active\\nOnly remote configuration (username, remote_name, url) may be changed in the running session.\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n//@ts-check\\n\\n/**\\n * @typedef {Object} remoteConfig\\n * @property {String} name The name of the remote database on the db server\\n * @property {String} url The url of the database server (ej https://xxxx.cloudant.com)\\n * @property {String} username An user with access rights to the remote database specified on name\\n * @property {String} [ password ] The password of the provided username\\n */\\n\\n/**\\n * @typedef {Object} databaseConfig\\n * @property {String} name The name of the database\\n * @property {remoteConfig} remote remote configurations\\n */\\n\\n/**\\n * @typedef {Object} tpouchConfig\\n * @property {String} selectedDbId The name of the currently selected database\\n * @property {Object.<string,databaseConfig>} databases A map of the existing databases and its config\\n * @property {Object} debug Current debug configuration\\n * @property {Boolean} useFatTiddlers if the skinny tiddlers should be loaded with text field included\\n */\\n'use strict'; // Export name and synchronous status\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \\\"string\\\"); return _typeof(key) === \\\"symbol\\\" ? key : String(key); }\\n\\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \\\"object\\\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \\\"default\\\"); if (_typeof(res) !== \\\"object\\\") return res; throw new TypeError(\\\"@@toPrimitive must return a primitive value.\\\"); } return (hint === \\\"string\\\" ? String : Number)(input); }\\n\\nexports.name = 'TiddlyPouch-config';\\nexports.before = ['pouchdb'];\\nexports.platforms = ['browser'];\\nexports.synchronous = false;\\nvar CONFIG_PREFIX = '$:/plugins/danielo515/tiddlypouch/config/';\\nvar CONFIG_TIDDLER = \\\"\\\".concat(CONFIG_PREFIX, \\\"config_database\\\");\\n/**\\n * @module config-startup\\n */\\n\\nexports.startup = function (callback) {\\n  var _require = require(\\\"$:/plugins/danielo515/tiddlypouch/utils\\\"),\\n      extendDeep = _require.extendDeep,\\n      extendOne = _require.extendOne;\\n\\n  var LOGGER = require(\\\"$:/plugins/danielo515/tiddlypouch/utils/logger.js\\\", true).Logger;\\n\\n  var Logger = new LOGGER('TiddlyPouch:config');\\n\\n  var Ui = require(\\\"$:/plugins/danielo515/tiddlypouch/ui/config.js\\\");\\n\\n  var DbConfig = require(\\\"$:/plugins/danielo515/tiddlypouch/config/single-db-config\\\");\\n  /** @type {tpouchConfig} */\\n\\n\\n  var _config;\\n\\n  var _configDB; // PouchDb where the _config is persisted to\\n\\n\\n  var currentDB; // name, remote { url, user } Only configs!, not the actual db\\n\\n  var DEFAULT_NOTEBOOK_NAME = 'MyNotebook';\\n  /**\\n  * @returns {tpouchConfig}\\n  */\\n\\n  function getDefaultConfig() {\\n    return {\\n      debug: {\\n        active: true,\\n        verbose: false\\n      },\\n      selectedDbId: DEFAULT_NOTEBOOK_NAME,\\n      useFatTiddlers: false,\\n      databases: {}\\n    };\\n  }\\n  /*==== TIDDLER METHODS === */\\n\\n\\n  function _readConfigTiddler() {\\n    try {\\n      return JSON.parse($tw.wiki.getTiddler(CONFIG_TIDDLER).fields.text);\\n    } catch (error) {\\n      console.log('No tiddler config, using default');\\n      return getDefaultConfig();\\n    }\\n  }\\n\\n  function _writeConfigTiddler(newConfig) {\\n    var config = newConfig || _config;\\n    var Jconfig = JSON.stringify(config);\\n    $tw.wiki.addTiddler(new $tw.Tiddler({\\n      title: CONFIG_TIDDLER,\\n      type: 'application/json',\\n      text: Jconfig\\n    }));\\n    return newConfig;\\n  }\\n  /**\\n  * @function _updateConfig\\n  * The official method of saving configurations.\\n  * It accepts an object describing the new state of the configuration,\\n  * which can be a complete configuration object or just a subsection.\\n  * Configuration update is made by deep merging, so you can update sections of the configuration by providing\\n  * an object that only contains such sections, for example the specific configuration of one database.\\n  * @param  {Object} newConfig The new configuration to be persisted\\n  * @return {Promise} @fulfills to the config that has been saved to the database\\n  */\\n\\n\\n  function _updateConfig(newConfig) {\\n    // Extends existing config with the new one. Use empty object as base to avoid mutability\\n    var config = extendDeep({}, _config, newConfig);\\n\\n    if (!config || !_isValidConfig(config)) {\\n      Logger.log('Updating config to DB - ERROR', 'Tried to persist an invalid config');\\n      return;\\n    } // After any update to the config persist the changes\\n\\n\\n    return _persistConfig(config).then(function (updatedConfig) {\\n      // persist config returns the config just saved to the DB (important for revision)\\n      _config = updatedConfig;\\n\\n      _writeConfigTiddler(updatedConfig);\\n\\n      return updatedConfig;\\n    });\\n  }\\n  /**\\n  * Removes the configuration of the provided database name\\n  * from the config store and persists it.\\n  * Make sure to call this method after deleting the database.\\n  * @param {String} dbName the database name to remove\\n  * @returns {Promise<tpouchConfig>} a promise that resolves when the new configuration\\n  * has been saved to the config database.\\n  */\\n\\n\\n  function removeDatabase(dbName) {\\n    var _config$databases = _config.databases,\\n        _ = _config$databases[dbName],\\n        databases = _objectWithoutProperties(_config$databases, [dbName].map(_toPropertyKey));\\n\\n    var config = _objectSpread({}, _config, {\\n      databases: databases,\\n      selectedDbId: Object.keys(databases)[0] || DEFAULT_NOTEBOOK_NAME\\n    }); // After any update to the config persist the changes\\n\\n\\n    return _persistConfig(config).then(function (updatedConfig) {\\n      // persist config returns the config just saved to the DB (important for revision)\\n      _config = updatedConfig;\\n\\n      _writeConfigTiddler(updatedConfig);\\n\\n      return updatedConfig;\\n    });\\n  }\\n  /*==== DATABASE METHODS === */\\n\\n  /**\\n  * Saves the current configuration to the database\\n  *\\n  * @returns {Promise}\\n  * - Fullfills to the document written\\n  */\\n\\n\\n  function _persistConfig(newConfig) {\\n    var config = extendOne({\\n      _id: 'configuration'\\n    }, newConfig);\\n    return _configDB.get('configuration')[\\\"catch\\\"](function (err) {\\n      if (err.status !== 404) throw err;\\n      return getDefaultConfig();\\n    }).then(function (old) {\\n      return _configDB.put(_objectSpread({}, old, {}, config));\\n    }).then(function (status) {\\n      Logger.log('Persist config to DB - OK', status);\\n      return _readConfigFromDB();\\n    })[\\\"catch\\\"](function (err) {\\n      Logger.log('Persist config to DB - ERROR', err);\\n      return config;\\n    });\\n  }\\n  /**\\n  * Reads the configuration from the _configDB\\n  * This method should be called from init() or after the database is instantiated\\n  *\\n  * @returns {Promise}\\n  * - Fullfills with the configuration object\\n  * - Rejects if no config exists or it is invalid\\n  */\\n\\n\\n  function _readConfigFromDB() {\\n    return _configDB.get('configuration').then(function (config) {\\n      if (_isValidConfig(config)) {\\n        return config;\\n      }\\n\\n      throw new Error(\\\"Config was read, but it was invalid\\\".concat(JSON.stringify(config, null, 2)));\\n    })[\\\"catch\\\"](function (err) {\\n      Logger.log('Config read from DB - ERROR', err);\\n      throw err;\\n    });\\n  }\\n  /*==== HELPER METHODS === */\\n\\n\\n  function _isValidConfig(config) {\\n    var valid = false;\\n    valid = !!(config && config.debug);\\n    valid = !!(config && config.selectedDbId);\\n    return valid;\\n  }\\n  /**\\n  * Reads the configuration of certain database from the config object.\\n  * Currently the _config holds also the databases configurations, but this may change on the future.\\n  *\\n  * If no configuration is found, returns a default config.\\n  *\\n  * @param {String} dbName name of the DB you want the config of\\n  * @returns {databaseConfig} databaseConfig\\n  */\\n\\n\\n  function _getDatabaseConfig(dbName) {\\n    var configDefault = {\\n      name: dbName,\\n      remote: {\\n        name: null,\\n        username: null,\\n        url: null\\n      }\\n    };\\n    _config.databases[dbName] = _config.databases[dbName] || configDefault;\\n    return _config.databases[dbName];\\n  }\\n  /*==== PUBLIC METHODS === */\\n\\n  /**\\n  * Updates the remote config of the CURRENT database instance, and also it's associated configuration\\n  * inside the global databases configuration.\\n  * We update the current db instead of the selected one because this method is usually called after or before login,\\n  * so what makes sense is to login to the current database, not a potenitally saved one.\\n  * This is the only method that is allowed (for now) to modify the running config.\\n  * This method takes care of updating just the required sections, so make sure to pass to it JUST the remote section\\n  * @param {remoteConfig} remoteConf Just the remote section of a db config.\\n  * @returns {Promise} @fulfills when the config has been stored to the conf db.\\n  */\\n\\n\\n  function updateRemoteConfig(remoteConf) {\\n    currentDB.remote = $tw.utils.extend({}, currentDB.remote, remoteConf);\\n    return _updateConfig({\\n      databases: _defineProperty({}, currentDB.getName(), {\\n        remote: remoteConf\\n      })\\n    });\\n  }\\n  /**\\n  * Fetches the names of the databases which configurations are saved\\n  *\\n  * @returns {Array} dbNames The names of all the databases configurations stored on the config\\n  */\\n\\n\\n  function getAllDBNames() {\\n    var dbNames = [];\\n    $tw.utils.each(_config.databases, function (db) {\\n      dbNames.push(db.name);\\n    });\\n    return dbNames;\\n  }\\n\\n  function isDebugActive() {\\n    return _config.debug.active;\\n  }\\n\\n  function isDebugVerbose() {\\n    return _config.debug.verbose;\\n  }\\n  /**\\n  * @returns {Boolean} if the use fat tiddlers option is active or not\\n  */\\n\\n\\n  function useFatTiddlers() {\\n    return _config.useFatTiddlers;\\n  }\\n  /**\\n  * Initializes the configuration internals.\\n  * - Creates the Pouch config db\\n  * - Reads from the config database\\n  * -- Load tiddler config if no config on db exists\\n  * --- Load default config if no tiddler config exists\\n  * - Updates the tiddler version of the config db\\n  * - Persists config read from tiddler to DB\\n  *\\n  * @returns\\t{Promise} When fullfilled the configuration is ready to be used\\n  */\\n\\n\\n  function init() {\\n    _configDB = $TPouch._configDb;\\n    Logger.log('Initializing config module');\\n    return _readConfigFromDB() // be aware of not breaking the promise chain!\\n    .then(function (config) {\\n      // All ok reading from DB.\\n      Logger.debug('Config read from DB - OK');\\n      _config = config;\\n      return _writeConfigTiddler(config); // Save current config to tiddler\\n    })[\\\"catch\\\"](function (error) {\\n      // Error reading from db, fallback to tiddler configuration\\n      Logger.debug('Error reading config from db: ', error);\\n      Logger.debug('FallingBack to tiddler configuration');\\n      _config = _readConfigTiddler();\\n      return _config; // return something to continue the chain!\\n    }).then(function (config) {\\n      currentDB = new DbConfig(_getDatabaseConfig(_config.selectedDbId));\\n      return _updateConfig(config); //Persisted at the end of the chain because some functions may update with default values\\n    });\\n  }\\n\\n  return init().then(function () {\\n    /*==== PUBLIC API === */\\n\\n    /* --- TiddlyPouch namespace creation and basic initialization---*/\\n    $TPouch.Logger = LOGGER;\\n    $TPouch.Logger.prototype.isDebugActive = _config.debug.active; // set logger defaults from what we read from DB\\n\\n    $TPouch.DbStore = require(\\\"$:/plugins/danielo515/tiddlypouch/databases/DbStore.factory\\\"); // Config section of the global namespace\\n\\n    $TPouch.config = {\\n      removeDatabase: removeDatabase,\\n      getAllDBNames: getAllDBNames,\\n      readConfigTiddler: _readConfigTiddler,\\n      getDatabaseConfig: _getDatabaseConfig,\\n      update: _updateConfig,\\n      updateRemoteConfig: updateRemoteConfig,\\n      selectedDB: _config.selectedDbId,\\n      _configDB: _configDB,\\n      _getConfig: function _getConfig() {\\n        return _config;\\n      },\\n      // this is just to allow external code read this config, not tu use it at all\\n      debug: {\\n        isActive: isDebugActive,\\n        isVerbose: isDebugVerbose\\n      },\\n      useFatTiddlers: useFatTiddlers,\\n      currentDB: currentDB\\n    };\\n    Ui.refreshUI(_config);\\n    Logger.log('Configuration startup finished', _config);\\n    callback();\\n  });\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/startup/startup-config.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/startup/event-listeners.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/startup/event-listeners.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/startup/event-listeners.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nThis module creates the basic structure needed for the plugin.\\nThis included the TiddlyPouch Object namespace and the local database\\nThe existence of the database determines if the plugin will be active or not.\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n'use strict'; // Export name and synchronous status\\n\\nexports.name = 'TiddlyPouch-eventListeners';\\nexports.after = ['startup'];\\nexports.platforms = ['browser'];\\nexports.synchronous = true;\\n\\nvar _require = require(\\\"$:/plugins/danielo515/tiddlypouch/constants.js\\\"),\\n    DELETE_DB = _require.DELETE_DB,\\n    LIST_REVISIONS = _require.LIST_REVISIONS,\\n    LOAD_REVISION = _require.LOAD_REVISION,\\n    CONFIG_SAVED = _require.CONFIG_SAVED,\\n    UPDATE_DEBUG = _require.UPDATE_DEBUG,\\n    UPDATE_SELECTED_DB = _require.UPDATE_SELECTED_DB,\\n    DB_HAS_BEEN_SELECTED = _require.DB_HAS_BEEN_SELECTED;\\n\\nexports.startup = function () {\\n  var logger = new $TPouch.Logger('TiddlyPouch');\\n\\n  var uiConnector = require(\\\"$:/plugins/danielo515/tiddlypouch/ui/config\\\");\\n\\n  var Utils = require(\\\"$:/plugins/danielo515/tiddlypouch/utils\\\");\\n  /*****************************************************************************\\n  ########################### EVENT LISTENERS ##################################*/\\n\\n\\n  $tw.rootWidget.addEventListener(DELETE_DB, function ()\\n  /**event*/\\n  {\\n    $tw.passwordPrompt.createPrompt({\\n      serviceName: $tw.language.getString('TiddlyPouch/Delete-DB', {\\n        variables: {\\n          database: $TPouch.config.currentDB.name\\n        }\\n      }),\\n      noUserName: true,\\n      submitText: 'Confirm',\\n      canCancel: true,\\n      repeatPassword: false,\\n      callback: function callback(data) {\\n        if (data && data.password === 'delete') {\\n          $TPouch.database.destroy().then(function () {\\n            logger.alert('Database ', $TPouch.config.currentDB.name, ' deleted!!!');\\n          });\\n        }\\n\\n        return true; // Get rid of the password prompt\\n      }\\n    });\\n  });\\n  /**\\n  * Just asks for the revisions array and saves it as a JSON tiddler.\\n  */\\n\\n  $tw.rootWidget.addEventListener(LIST_REVISIONS, function (event) {\\n    $TPouch.database.getTiddlerRevisions(event.param).then(function (revisionsList) {\\n      var title = \\\"$:/temp/revisions:\\\".concat(event.param);\\n      Utils.saveAsJsonTiddler(title, revisionsList);\\n    });\\n  });\\n  /**\\n  * Loads certain revision of a tiddler under the revision namespace\\n  */\\n\\n  $tw.rootWidget.addEventListener(LOAD_REVISION, function (event) {\\n    $TPouch.database.getTiddler(event.param, event.paramObject.revision).then(function (tiddler) {\\n      tiddler.title = \\\"$:/temp/revision:\\\".concat(event.paramObject.revision.slice(0, 6), \\\":\\\").concat(event.param);\\n      $tw.wiki.addTiddler(tiddler);\\n    });\\n  });\\n  /** ================ CONFIG RELATED ================ */\\n\\n  $tw.rootWidget.addEventListener(CONFIG_SAVED, function () {\\n    var reload = confirm('Configuration has been changed and saved. It is necessary to reload the window. Are you Ok with it?');\\n    reload && location.reload();\\n  });\\n  $tw.rootWidget.addEventListener('tp-sync-state', uiConnector.setSyncFlag);\\n  $tw.rootWidget.addEventListener(DB_HAS_BEEN_SELECTED, uiConnector.handlers.databaseHasBeenSelected);\\n  $tw.rootWidget.addEventListener(UPDATE_DEBUG, uiConnector.handlers.updateDebug);\\n  $tw.rootWidget.addEventListener(UPDATE_SELECTED_DB, uiConnector.handlers.updateDbConfig);\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/startup/startup-event_listeners.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/startup/pouch.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/startup/pouch.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/startup/pouch.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nThis module creates the basic structure needed for the plugin.\\nThis included the TiddlyPouch Object namespace and the local database\\nThe existence of the database determines if the plugin will be active or not.\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n\\n/*global emit: false*/\\n'use strict'; // Export name and synchronous status\\n\\nexports.name = 'pouchdb';\\nexports.before = ['startup'];\\nexports.platforms = ['browser'];\\nexports.synchronous = false;\\n\\nexports.startup = function (callback) {\\n  /* --- Declaration ZONE ---*/\\n  //============================\\n  var logger = new $TPouch.Logger('PouchStartup');\\n\\n  var DbRouter = require(\\\"$:/plugins/danielo515/tiddlypouch/databases/router.js\\\");\\n\\n  var Routes = require(\\\"$:/plugins/danielo515/tiddlypouch/databases/routes\\\");\\n  /* Here is where startup stuff really starts */\\n\\n\\n  $TPouch._db = $TPouch._db || new PouchDB($TPouch.config.currentDB.name);\\n  $TPouch.database = $TPouch.DbStore($TPouch.config.currentDB.name, 'tiddlers', $TPouch._db);\\n  /** The plugins DbStore points to the same PouchDB as the tiddlers one, but they have different methods internally */\\n\\n  $TPouch.plugins = $TPouch.DbStore('__TP_plugins', 'plugins', $TPouch._db);\\n  $TPouch.router = DbRouter.createRouter($TPouch.database);\\n  /**Add the plugins route and database to the router.\\n  *\\n  */\\n\\n  $TPouch.router.addRoute(Routes.plugins).addDestination('__TP_plugins', $TPouch.plugins);\\n  logger.log('Client side dbs created');\\n\\n  if ($TPouch.config.debug.isActive()) {\\n    $TPouch.database._db.on('error', function (err) {\\n      logger.log(err);\\n      debugger;\\n    });\\n  }\\n  /** ========= Create the required indexes (in parallel!) to operate the DBs =======*/\\n\\n\\n  Promise.all([//   $TPouch.plugins.createIndex('by_plugin_type', function (doc) { doc.fields && doc.fields['plugin-type'] && emit(doc.fields['plugin-type']) })\\n  // , $TPouch.database.createIndex('by_type', function (doc) { doc.fields.type && emit(doc.fields.type) })\\n\\n  /*  ==== SKINNY TIDDLERS INDEX ===*/\\n  $TPouch.database.createIndex('skinny_tiddlers', function (doc) {\\n    if (doc.fields['plugin-type']) {\\n      // skip plugins!\\n      return;\\n    }\\n\\n    var fields = {};\\n\\n    for (var field in doc.fields) {\\n      if (['text'].indexOf(field) === -1) {\\n        fields[field] = doc.fields[field];\\n      }\\n    }\\n\\n    fields.revision = doc._rev;\\n    emit(doc._id, fields);\\n  })\\n  /*  ==== STARTUP TIDDLERS INDEX ===*/\\n  , $TPouch.database.createIndex('startup_tiddlers', function (doc) {\\n    var titles = ['$:/palette', '$:/status/UserName', '$:/config/SyncFilter']; // list of startup titles\\n\\n    doc.fields && (doc.fields.tags && doc.fields.tags.indexOf('$:/tags/Macro') !== -1 || doc.fields.tags && doc.fields.tags.indexOf('$:/tags/Palette') !== -1 || titles.indexOf(doc.fields.title) !== -1 || doc.fields.type === 'application/javascript' || !!doc.fields['plugin-type']) && emit(doc.id);\\n  })])[\\\"catch\\\"](function (reason) {\\n    logger.log('Something went wrong during index creation', reason);\\n  }).then(function () {\\n    /*Fetch and add the StoryList before core tries to save it*/\\n    return $TPouch.database.getTiddler('$:/StoryList');\\n  }).then(function (tiddlerFields) {\\n    $tw.wiki.addTiddler(tiddlerFields);\\n    logger.debug('StoryList was already in database ', tiddlerFields);\\n    return $TPouch.database.getTiddler('$:/DefaultTiddlers');\\n  }).then(function (tiddlerFields) {\\n    $tw.wiki.addTiddler(tiddlerFields);\\n    logger.log('Default tiddlers loaded from database ', tiddlerFields);\\n  })[\\\"catch\\\"](function (err) {\\n    logger.log('Error retrieving StoryList or DefaultTiddlers');\\n    logger.debug(err);\\n  }).then(function () {\\n    logger.log('Client side dbs initialized');\\n    callback();\\n  });\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/startup/startup-pouch.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/startup/pouchdb-syncer.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/startup/pouchdb-syncer.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/startup/pouchdb-syncer.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n'use strict'; // Export name and synchronous status\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nexports.name = 'pouchdb-syncer';\\nexports.after = ['pouchdb'];\\nexports.platforms = ['browser'];\\nexports.synchronous = true;\\nvar SYNC_STATE = '$:/state/tiddlypouch/sync/status';\\nvar SYNC_ERRORS = '$:/state/tiddlypouch/sync/Log'; // for now, log everything to the same place\\n\\nvar SYNC_LOG = '$:/state/tiddlypouch/sync/Log';\\n\\nvar constatns = require(\\\"$:/plugins/danielo515/tiddlypouch/constants\\\");\\n\\nexports.startup = function () {\\n  /* --- Declaration ZONE ---*/\\n\\n  /*============================*/\\n  var logger = new $TPouch.Logger('PouchSync');\\n\\n  function PouchLog(log, info, header) {\\n    if ($TPouch.config.debug.isActive()) {\\n      /*Appends info to the specified log tiddler*/\\n      var oldinfo = \\\"\\\".concat($tw.wiki.getTiddlerText(log), \\\"\\\\n\\\");\\n\\n      if (_typeof(info) === 'object') {\\n        if (info.change && info.change.docs) {\\n          delete info.change.docs; //delete this horrible verbose thing\\n        }\\n\\n        var newInfo = JSON.stringify(info, null, $tw.config.preferences.jsonSpaces);\\n      } else {\\n        var newInfo = info;\\n      }\\n      /* If provided we add the header to know what event called this logger\\n      if you try to add header in separate calls you may end with wrong order\\n      due to the asynchronous nature of the sync mechanism*/\\n\\n\\n      newInfo = header ? header + newInfo : newInfo;\\n      var logTiddler = {\\n        type: 'text/plain',\\n        text: oldinfo + newInfo,\\n        title: log\\n      };\\n      $tw.wiki.addTiddler(new $tw.Tiddler(logTiddler));\\n    }\\n\\n    logger.log(info);\\n  }\\n\\n  function startSync(remoteDB) {\\n    /*To-do: Should check if local db exists and if there is another sync going*/\\n\\n    /*First make sure we have the correct design document on the remote database.\\n      This is mandatory for filtered replication. Filtered replication is necessary\\n      to avoid replicating unnecesary documents like design documents.*/\\n    return remoteDB.put(buildFilterView()).then(start)[\\\"catch\\\"](function (err) {\\n      if (err.status == 409) {\\n        // If we get a 409 the document exist on remote\\n        start(); // So start sync anyway\\n      } else {\\n        PouchLog(SYNC_ERRORS, err, '===SYNC Error starting===');\\n        return err;\\n      }\\n    });\\n\\n    function start() {\\n      //Function that actually starts the sync\\n      var sync = $TPouch.database._db.sync(remoteDB, {\\n        live: true,\\n        retry: true,\\n        filter: 'filtered_replication/only_tiddlers'\\n      }).on('change', function (info) {\\n        PouchLog(SYNC_LOG, info, '===SYNC Change===');\\n\\n        if (info.direction === 'pull') {\\n          // If we just fetch new documents then make tiddlywiki update the new information.\\n          $tw.syncer.syncFromServer();\\n        }\\n      }).on('paused', function (err) {\\n        $tw.wiki.setText(SYNC_STATE, 'text', undefined, 'paused');\\n        if (err) PouchLog(SYNC_LOG, err, '===SYNC PAUSED===');else PouchLog(SYNC_LOG, '===SYNC PAUSED===');\\n      }).on('active', function () {\\n        $tw.wiki.setText(SYNC_STATE, 'text', undefined, 'syncing');\\n        PouchLog(SYNC_LOG, '===SYNC ACTIVE===');\\n        PouchLog(SYNC_LOG, 'replicate resumed');\\n      }).on('denied', function (info) {\\n        // a document failed to replicate\\n        PouchLog(SYNC_ERRORS, info, '===SYNC Denied===');\\n      }).on('complete', function (info) {\\n        $tw.wiki.setText(SYNC_STATE, 'text', undefined, 'completed');\\n        PouchLog(SYNC_LOG, info, '===SYNC Completed===');\\n      }).on('error', function (err) {\\n        $tw.wiki.setText(SYNC_STATE, 'text', undefined, 'error');\\n        PouchLog(SYNC_ERRORS, err, '===SYNC Error===');\\n      });\\n      /* For filtered replication to work, we need the filter view both on the remote DB and the local DB\\n      * Please check https://pouchdb.com/2015/04/05/filtered-replication.html for more info\\n      */\\n\\n\\n      $TPouch.database._db.put(buildFilterView())[\\\"catch\\\"](function (err) {\\n        if (err.status !== 409) {\\n          PouchLog(SYNC_ERRORS, 'Filtered replication may not work, we were unable to store the required doc on the local DB', '===SYNC Error starting===');\\n        }\\n      });\\n\\n      $TPouch.syncHandler = sync;\\n    }\\n  }\\n\\n  function newOnlineDB(authOptions) {\\n    /* authOptions: {\\n      username: 'mySecretUsername',\\n      password: 'mySecretPassword'\\n    }*/\\n    var Config = $TPouch.config;\\n    var URL = Config.currentDB.getUrl();\\n    var DatabaseName = Config.currentDB.getRemoteName();\\n    /*If there is no URL set, then no sync*/\\n\\n    if (!URL) {\\n      PouchLog(SYNC_LOG, 'Entering offline mode');\\n      $tw.rootWidget.dispatchEvent({\\n        type: 'tp-sync-state',\\n        param: 'offline'\\n      });\\n      return;\\n    }\\n\\n    $tw.rootWidget.dispatchEvent({\\n      type: 'tp-sync-state',\\n      param: 'online'\\n    });\\n    return new PouchDB(URL + DatabaseName, {\\n      auth: authOptions\\n    });\\n  }\\n\\n  function buildFilterView() {\\n    return {\\n      '_id': '_design/filtered_replication',\\n      'filters': {\\n        'only_tiddlers': function (doc) {\\n          return doc.hasOwnProperty('fields') && doc.fields.title !== '$:/StoryList' && doc.fields.title !== '$:/status/UserName';\\n        }.toString()\\n      }\\n    };\\n  }\\n\\n  ;\\n  /** Sync methos implantation */\\n\\n  $TPouch.startSync = startSync;\\n  $TPouch.newOnlineDB = newOnlineDB;\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/startup/startup-syncer.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/startup/utils.js\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/startup/utils.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/startup/utils.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nBasic Utils object.\\n\\n@preserve\\n\\n\\\\*/\\n\\n/**@module */\\n\\n/*jslint node: true, browser: true */\\n'use strict'; // Export name and synchronous status\\n\\nexports.name = 'pouchdb-utils';\\nexports.after = ['pouchdb'];\\nexports.before = ['pouchdb-syncer'];\\nexports.platforms = ['browser'];\\nexports.synchronous = true;\\n\\nexports.startup = function () {\\n  this.logger = new $TPouch.Logger('PouchDB');\\n  var self = this;\\n  var db = $TPouch.database;\\n  $TPouch.utils = $TPouch.utils || {};\\n  /** Removes the document with the provided title from the database*/\\n\\n  $TPouch.utils.remove = function (title) {\\n    db.get(title).then(function (doc) {\\n      return db.remove(doc);\\n    }).then(function (result) {\\n      self.logger.log('Document removed', result);\\n    })[\\\"catch\\\"](function (err) {\\n      self.logger.log(err);\\n    });\\n  };\\n  /** Replaces a document in the database with the provided one\\n  without taking in account the revision.*/\\n\\n\\n  $TPouch.utils.replace = function (newdoc) {\\n    db.get(newdoc._id).then(function (doc) {\\n      return db.remove(doc);\\n    }).then(function () {\\n      db.put(newdoc).then(function (doc) {\\n        self.logger.log('Document replaced', doc);\\n      });\\n    })[\\\"catch\\\"](function (err) {\\n      self.logger.log(err);\\n    });\\n  };\\n};\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/startup/startup-utils.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/Buttons/download-basic\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/Buttons/download-basic\",\n            \"text\": \"<$button class=\\\"tc-btn-big-green\\\">\\n<$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/plugins/danielo515/tiddlypouch/save/basic\\\" filename=\\\"empty.html\\\"/>\\nDownload Empty {{$:/core/images/save-button}}\\n</$button>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Database\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Database\",\n            \"caption\": \"Database\",\n            \"tags\": \"$:/tags/TiddlyPouch/ControlPanel\",\n            \"text\": \"!!! Database Name {{$:/state/TiddlyPouch/info/databaseName||$:/plugins/danielo515/tiddlypouch/Buttons/info}}\\n\\n<$reveal type=\\\"match\\\" state=\\\"$:/state/TiddlyPouch/info/databaseName\\\" text=\\\"show\\\">\\nThis is the name of your local database. Tiddlers are stored there.\\nYou can have as many databases as you want. Changing this value will make your wiki to save/load\\ntiddlers to/from that database. This requires a ''save and reload'' to take effect.\\n</$reveal>\\n\\nName: {{$:/plugins/danielo515/tiddlypouch/ui/database-name}}\\n@@color:#cc0000;\\n,,//Without this parameter the plugin remains inactive //,,\\n@@\\n\\n!!! Use fat tiddlers\\nUsually tiddlers are loaded on a lazy fashion, meaning that initially the text field is ommited\\nand when the tiddler is open then the text field is loaded.\\nChecking this will change that and all the tiddlers will be fully loaded upfront.\\n\\n<$checkbox tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/Config\\\" field=\\\"useFatTiddlers\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"false\\\"> Use fat tiddlers</$checkbox>\\n\\n!!! Connection Info\\n{{$:/plugins/danielo515/tiddlypouch/ControlPanel/Database/remote-db}}\\n\\n!!!Important information\\nLocal databases are grouped by domain.\\n''If you work'' with your wiki from a file then that particular file @@color:red; will not be able to\\naccess@@ any of the databases created by any wiki accessed online.\\nIf you want to sync databases between a wiki served by http and a local wiki you have to use\\nsome couch backend or export and import the database.\\n\\n!!! Database deletion\\nThis will delete your current database.\\nNote that if you are syncing to other devices this will only affects the local database, not the remote ones.\\n@@color:#cc0000;\\nThis action can not be undone!!\\n@@\\nPlease, reload your browser immediately after applying this.\\n\\n<$button message=\\\"tm-pouch-delete-db\\\">Delete database</$button>\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Debug\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Debug\",\n            \"caption\": \"Debug\",\n            \"tags\": \"$:/tags/TiddlyPouch/ControlPanel\",\n            \"text\": \"\\nActivate logging if you are experiencing problems while syncing or you are curious about it.\\n\\n\\\"\\\"\\\"\\n<$checkbox tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/Config\\\" field=\\\"debug\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"false\\\"> Debug mode</$checkbox>\\n<$checkbox tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/Config\\\" field=\\\"verbose\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"false\\\"> Verbose mode</$checkbox>\\n\\\"\\\"\\\"\\n\\n<$button message=\\\"tm-TP-config-updateDebug\\\">Save Config</$button>\\n\\n!!! Sync Log\\n\\n<$button>\\n<$action-navigate $to=\\\"$:/state/tiddlypouch/sync/Log\\\"/>\\nOpen Log\\n</$button>\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Download\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Download\",\n            \"caption\": \"Download\",\n            \"tags\": \"$:/tags/TiddlyPouch/ControlPanel\",\n            \"text\": \"Here you have different methods of download this wiki.\\n\\n!!Save empty\\nThis downloads this wiki without any tiddler created by the user. ''Useful if'':\\n\\n* You have changed any tiddlywiki setting and you want to hardcode it on the html file.\\n* You want to move this wiki to another computer/browser.\\n* You have installed a plugin and you want it to be loaded from the file rather than from the database\\n* You want to start again without any tiddler but keeping your current plugins/configurations\\n\\n{{$:/plugins/danielo515/tiddlypouch/Buttons/download-empty}}\\n\\n<!--\\n!!Pack database\\nThis option packs the database currently in use into a system tiddler and then it\\ndownloads the wiki with it. ''Useful'' if you want to use this wiki in a different computer\\nor browser.\\n-->\\n\"\n        },\n        \"/Users/danielo/mega/programacion/tiddlywiki/tiddlypouch/dist/danielo515/tiddlypouch/tiddlers/ControlPanel/ControlPanel-Server.tid.old\": {\n            \"title\": \"/Users/danielo/mega/programacion/tiddlywiki/tiddlypouch/dist/danielo515/tiddlypouch/tiddlers/ControlPanel/ControlPanel-Server.tid.old\",\n            \"text\": \"title: $:/plugins/danielo515/tiddlypouch/ControlPanel/Server\\ncaption: Server\\ntags: $:/tags/TiddlyPouch/ControlPanel\\n\\n!!! Connection Info\\nFill the below fields if you want to synchronize your local database with a remote\\ncouch-like server.\\n\\n~CouchDB URL: <$edit-text tag=\\\"input\\\" tiddler=\\\"$:/plugins/danielo515/tiddlypouch/config/URL\\\"  default=\\\"\\\"/>\\n@@color:#c0c0c0;\\n,,//EJ: ~https://someone.cloudant.com //,,\\n@@\\n\\nDatabase name: <$edit-text tag=\\\"input\\\" tiddler=\\\"$:/plugins/danielo515/tiddlypouch/config/RemoteDatabaseName\\\" default=\\\"\\\"/>\\n@@color:#c0c0c0;\\n,,//Your data will be synbced to this this database. ''Must exist on server''. //,,\\n@@\\n\\nNeeds XHR withCredentials: <$transclude tiddler=\\\"$:/plugins/wshallum/couchadaptor/config/RequiresWithCredentials\\\">no</$transclude>\\n\\n@@color: #DD0000;\\nTo make this changes take effect you have to save and reload.\\n@@\\n{{$:/plugins/danielo515/tiddlypouch/Buttons/download-empty}}\\n\\n!!! Authentication\\n\\n<$reveal state=\\\"$:/status/IsLoggedIn\\\" type=\\\"nomatch\\\" text=\\\"yes\\\">\\nLog in to ~CouchDB: <$button message=\\\"tm-login\\\">Login</$button>\\n</$reveal>\\n<$reveal state=\\\"$:/status/IsLoggedIn\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n<$reveal state=\\\"$:/status/UserName\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\nLogged in as {{$:/status/UserName}} <$button message=\\\"tm-logout\\\">Logout</$button>\\n</$reveal>\\n<$reveal state=\\\"$:/status/UserName\\\" type=\\\"match\\\" text=\\\"\\\">\\nLogged in with no username: ~CouchDB is probably in [[admin party mode|http://docs.couchdb.org/en/latest/intro/security.html#the-admin-party]]. <$button message=\\\"tm-logout\\\">Logout</$button>\\n</$reveal>\\n</$reveal>\\n\",\n            \"type\": \".old\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/remote-user\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/remote-user\",\n            \"text\": \"<$edit-text tag=\\\"input\\\" index=\\\"remote.username\\\" tiddler=\\\"$:/plugins/danielo515/tiddlypouch/config/selected_database\\\"  default=\\\"\\\"/>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/remote-name\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/remote-name\",\n            \"text\": \"<$edit-text tag=\\\"input\\\" index=\\\"remote.name\\\" tiddler=\\\"$:/plugins/danielo515/tiddlypouch/config/selected_database\\\" default=\\\"\\\"/>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/remote-url\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/remote-url\",\n            \"text\": \"<$edit-text tag=\\\"input\\\" index=\\\"remote.url\\\" tiddler=\\\"$:/plugins/danielo515/tiddlypouch/config/selected_database\\\"  default=\\\"\\\"/>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/save-database-config\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/save-database-config\",\n            \"text\": \"<$button message=\\\"tm-TP-config-updateSelectedDB\\\">Save Config</$button>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ControlPanel\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ControlPanel\",\n            \"caption\": \"~TiddlyPouch\",\n            \"tags\": \"$:/tags/ControlPanel\",\n            \"text\": \"<div class=\\\"tc-tiddlypouch-control-panel\\\">\\n<<tabs \\\"[all[shadows]tag[$:/tags/TiddlyPouch/ControlPanel]]\\\" \\\"$:/plugins/danielo515/tiddlypouch/ControlPanel/Database\\\" \\\"$:/state/TiddlyPouch/tabs\\\">>\\n</div>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Database/remote-db\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ControlPanel/Database/remote-db\",\n            \"caption\": \"remote-db\",\n            \"text\": \"<div class=\\\"tc-tp-remote-db\\\">\\n\\n    <p>\\n        Fill the fields below if you want to synchronize your local database with a remote\\n        couch-like server.\\n        This information will be saved as metadata of the selected local database.\\n    </p>\\n    \\n    <p>\\n        ~CouchDB URL: {{$:/plugins/danielo515/tiddlypouch/ui/remote-url}}\\n        @@color:#c0c0c0;\\n        ,,//EJ: ~https://someone.cloudant.com //,,\\n        @@\\n    </p>\\n    \\n    <p>\\n        Remote database name: {{$:/plugins/danielo515/tiddlypouch/ui/remote-name}}\\n        @@color:#c0c0c0;\\n        ,,//Local database will be synced to this database. ''Must exist on server'' if you are not an admin user. //,,\\n        @@\\n    </p>\\n    \\n    <p>\\n        Remote user-name: {{$:/plugins/danielo515/tiddlypouch/ui/remote-user}}\\n        @@color:#c0c0c0;\\n        ,,//User or api key with admin permisions on the remote db. ''This field is optional''. //,,\\n        @@\\n    </p>\\n    \\n    {{$:/plugins/danielo515/tiddlypouch/ui/save-database-config}}\\n</div>\\n\"\n        },\n        \"GettingStarted\": {\n            \"title\": \"GettingStarted\",\n            \"text\": \"\\\\define lingo-base() $:/language/ControlPanel/Basics/\\nWelcome to ~NoteSelf and the ~TiddlyWiki community\\n\\nYou can start using your notebook right NOW. Go ahead and collect ideas, make lists, take notes, start a diary...\\nYou can have as many notebooks as you want.\\nJust change the `Notebook Name` and hit the save config button. New notes will be saved to that notebook.\\n\\nIn case you want automatic synchronization fill the fields of the synchronization section below\\n\\n!! Setup this Notebook\\n\\n<div class=\\\"tc-control-panel\\\">\\n\\n|<<tiddlypouch-tab \\\"Notebook Name\\\" \\\"Database\\\" >> |{{$:/plugins/danielo515/tiddlypouch/ui/database-name}} |\\n|! Sync configuration|<|\\n|<<tiddlypouch-tab \\\"CouchDB URL\\\" \\\"Database\\\" >> |{{$:/plugins/danielo515/tiddlypouch/ui/remote-url}} |\\n|<<tiddlypouch-tab \\\"Remote database name\\\" \\\"Database\\\" >> |{{$:/plugins/danielo515/tiddlypouch/ui/remote-name}} |\\n| {{$:/plugins/danielo515/tiddlypouch/ui/save-database-config}} |<|\\n|<$link to=\\\"$:/SiteTitle\\\">Page title</$link> |<$edit-text tiddler=\\\"$:/SiteTitle\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/DefaultTiddlers\\\"><<lingo DefaultTiddlers/Prompt>></$link> |<<lingo DefaultTiddlers/TopHint>><br> <$edit tag=\\\"textarea\\\" tiddler=\\\"$:/DefaultTiddlers\\\"/><br>//<<lingo DefaultTiddlers/BottomHint>>// |\\n</div>\\n\\nSee the [[control panel|$:/ControlPanel]] for more options.\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/Installation\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/Installation\",\n            \"created\": \"20140901120057909\",\n            \"modified\": \"20160730120057909\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"# Open your wiki in a browser\\n# Drag this link into your wiki\\n#> [[$:/plugins/danielo515/tiddlypouch]]\\n# Save your wiki\\n\"\n        },\n        \"$:/SiteTitle\": {\n            \"title\": \"$:/SiteTitle\",\n            \"text\": \"My Notebook\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/Stylesheet/ControlPanel\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/Stylesheet/ControlPanel\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"text\": \".tc-tiddlypouch-control-panel input {\\n    width: 100%;\\n}\\n\\n.tc-tiddlypouch-control-panel input[type=\\\"checkbox\\\"], .tc-tiddlypouch-control-panel-checkbox {\\n    width: auto;\\n}\\n\\n.tc-tiddlypouch-control-panel .tc-type-selector input, .tc-control-panel table .tc-type-selector input {\\n    width: auto;\\n}\\n\\n.tc-plugin-reload-warning svg {\\n    height: 1em;\\n}\"\n        },\n        \"$:/status/UserName\": {\n            \"title\": \"$:/status/UserName\",\n            \"comment\": \"Put your desired user name here, for signing.\",\n            \"text\": \"\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/Buttons/download-empty\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/Buttons/download-empty\",\n            \"text\": \"<$button class=\\\"tc-btn-big-green\\\">\\n<$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/plugins/danielo515/tiddlypouch/save/empty\\\" filename=\\\"empty.html\\\"/>\\nSave empty {{$:/core/images/save-button}}\\n</$button>\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/save/empty\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/save/empty\",\n            \"text\": \"\\\\define saveTiddlerFilter()\\n[is[system]] -[prefix[$:/state/]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]]\\n\\\\end\\n\\\\define savingEmpty()\\nyes\\n\\\\end\\n{{$:/core/templates/tiddlywiki5.html}}\\n\\n\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/Buttons/info\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/Buttons/info\",\n            \"comment\": \"this tiddler should be used as a transclude template\",\n            \"text\": \"<$reveal type=\\\"nomatch\\\" state={{!!title}} text=\\\"show\\\">\\n<$button set={{!!title}} setTo=\\\"show\\\" class=\\\"tc-btn-invisible\\\"><span style=\\\"top:-9px; position: relative\\\">{{$:/core/images/help}}</span></$button>\\n</$reveal><$reveal type=\\\"match\\\" state={{!!title}} text=\\\"show\\\">\\n<$button set={{!!title}} class=\\\"tc-btn-invisible\\\" setTo=\\\"hide\\\"><span style=\\\"top:-9px; position: relative\\\">{{$:/core/images/help}}</span></$button>\\n</$reveal>\"\n        },\n        \"$:/language/TiddlyPouch/Delete-DB\": {\n            \"title\": \"$:/language/TiddlyPouch/Delete-DB\",\n            \"text\": \"You are going to delete database named <<database>>. Please type 'delete' and click confirm.\"\n        },\n        \"$:/language/TiddlyPouch/Notifications/Save/Starting\": {\n            \"title\": \"$:/language/TiddlyPouch/Notifications/Save/Starting\",\n            \"text\": \"Exporting database, please wait...\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/language/revisions/Hint\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/language/revisions/Hint\",\n            \"text\": \"Show current tiddler revisions\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/language/revisions/Caption\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/language/revisions/Caption\",\n            \"text\": \"Show revisions\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/save/basic\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/save/basic\",\n            \"text\": \"\\\\define saveTiddlerFilter()\\n[[$:/core]] [prefix[$:/plugins/danielo515/tiddlypouch/config/]] [[$:/isEncrypted]] [[$:/plugins/danielo515/tiddlypouch]] [[$:/plugins/danielo515/pouchdb]] [[$:/themes/tiddlywiki/snowwhite]] [[$:/themes/tiddlywiki/vanilla]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]]\\n\\\\end\\n\\\\define savingEmpty()\\nyes\\n\\\\end\\n{{$:/core/templates/tiddlywiki5.html}}\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/buttons/login\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/buttons/login\",\n            \"text\": \"<$button message=\\\"tm-login\\\" >Offline</$button>\"\n        },\n        \"$:/state/tiddlypouch/sync/errors\": {\n            \"title\": \"$:/state/tiddlypouch/sync/errors\",\n            \"text\": \"\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/sync-flag\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/sync-flag\",\n            \"text\": \"<$reveal type=\\\"match\\\" state=\\\"$:/state/tiddlypouch/sync/status\\\" text=\\\"offline\\\">\\n{{$:/plugins/danielo515/tiddlypouch/ui/buttons/login}}\\n</$reveal>\\n\\n<$reveal type=\\\"nomatch\\\" state=\\\"$:/state/tiddlypouch/sync/status\\\" text=\\\"offline\\\">\\n<$button class=\\\"tc-btn-invisible\\\">\\n<$reveal type=\\\"match\\\" state=\\\"$:/state/tiddlypouch/sync/status\\\" text=\\\"error\\\">{{$:/plugins/danielo515/tiddlypouch/images/cloud-error}}</$reveal>\\n<$reveal type=\\\"match\\\" state=\\\"$:/state/tiddlypouch/sync/status\\\" text=\\\"paused\\\">{{$:/plugins/danielo515/tiddlypouch/images/cloud-ok}}</$reveal>\\n<$reveal type=\\\"match\\\" state=\\\"$:/state/tiddlypouch/sync/status\\\" text=\\\"syncing\\\">{{$:/plugins/danielo515/tiddlypouch/images/cloud-spinning}}</$reveal>\\n</$button>\\n</$reveal>\"\n        },\n        \"$:/state/tiddlypouch/sync/Log\": {\n            \"title\": \"$:/state/tiddlypouch/sync/Log\",\n            \"text\": \"\\n\"\n        },\n        \"$:/state/tiddlypouch/sync/status\": {\n            \"title\": \"$:/state/tiddlypouch/sync/status\",\n            \"text\": \"offline\"\n        },\n        \"$:/core/ui/PageTemplate/pluginreloadwarning\": {\n            \"title\": \"$:/core/ui/PageTemplate/pluginreloadwarning\",\n            \"tags\": \"$:/tags/PageTemplate\",\n            \"text\": \"\\\\define lingo-base() $:/language/\\n\\n<$list filter=\\\"[has[plugin-type]haschanged[]!plugin-type[import]limit[1]]\\\">\\n\\n<$reveal type=\\\"nomatch\\\" state=\\\"$:/temp/HidePluginWarning\\\" text=\\\"yes\\\">\\n\\n<div class=\\\"tc-plugin-reload-warning\\\">\\n\\n<$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\nYou have just installed a plugin. Please wait until changes has been saved (<span class=\\\"tc-dirty-indicator\\\">{{$:/core/images/done-button}}</span>) and reload the window <$button set=\\\"$:/temp/HidePluginWarning\\\" setTo=\\\"yes\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/close-button}}</$button>\\n\\n</$set>\\n\\n</div>\\n\\n</$reveal>\\n\\n</$list>\"\n        },\n        \"$:/core/ui/ViewTemplate\": {\n            \"title\": \"$:/core/ui/ViewTemplate\",\n            \"text\": \"\\\\define InfoTabState()\\n$:/state/infotab/$(currentTiddler)$\\n\\\\end\\n\\\\define frame-classes()\\ntc-tiddler-frame tc-tiddler-view-frame $(missingTiddlerClass)$ $(shadowTiddlerClass)$ $(systemTiddlerClass)$ $(tiddlerTagClasses)$\\n\\\\end\\n\\\\define folded-state()\\n$:/state/folded/$(currentTiddler)$\\n\\\\end\\n<$set name=\\\"storyTiddler\\\" value=<<currentTiddler>>><$set name=\\\"tiddlerInfoState\\\" value=<<qualify \\\"$:/state/popup/tiddler-info\\\">> ><$set name=\\\"tiddlerInfoTabState\\\" value=<<InfoTabState>> ><$tiddler tiddler=<<currentTiddler>>><div class=<<frame-classes>>><$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\"><$transclude tiddler=<<listItem>>/></$list>\\n</div>\\n</$tiddler></$set></$set></$set>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/revisions/Diff\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/revisions/Diff\",\n            \"created\": \"20170611144453800\",\n            \"modified\": \"20170611160403640\",\n            \"tags\": \"\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"<div class=\\\"tc-tiddler-preview\\\">\\n  <div class=\\\"tc-tiddler-preview-preview\\\">\\n  <$tiddler tiddler={{$:/state/diff/left}}>\\n  <$transclude\\n        tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/revisions/side-view\\\"\\n        mode=\\\"inline\\\"/>\\n  </$tiddler>\\n  </div>\\n  <div class=\\\"tc-tiddler-preview-preview\\\">\\n  <$tiddler tiddler={{$:/state/diff/right}}>\\n  <$transclude\\n      tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/revisions/side-view\\\"\\n      mode=\\\"inline\\\"/>\\n  </$tiddler>\\n  </div>\\n</div>\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/buttons/set-diff\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/buttons/set-diff\",\n            \"created\": \"20170611145021006\",\n            \"modified\": \"20170611145812396\",\n            \"tags\": \"\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"<!--This button only works when transcluded inside the revision-transclude-template\\n    It sets the currently opened revision to be compared side by side with the most recent revision of the current tiddler -->\\n<$button>\\nDiff\\n<$action-setfield $tiddler=\\\"$:/state/diff/left\\\" text=<<currentTiddler>>/>\\n<$action-setfield $tiddler=\\\"$:/state/diff/right\\\" text=<<currentTab>>/>\\n<$action-setfield $tiddler=<<tv-revisions-tab-state>> text=\\\"Diff\\\"/>\\n</$button>\\n\"\n        },\n        \"$:/core/ui/TiddlerInfo\": {\n            \"title\": \"$:/core/ui/TiddlerInfo\",\n            \"text\": \"<$macrocall $name=\\\"tabs-state\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/TiddlerInfo]!has[draft.of]]\\\" state=<<tiddlerInfoTabState>> default={{$:/config/TiddlerInfo/Default}}/>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/buttons/revisions\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/buttons/revisions\",\n            \"caption\": \"{{$:/plugins/danielo515/tiddlypouch/language/revisions/Caption}}\",\n            \"description\": \"{{$:/plugins/danielo515/tiddlypouch/language/revisions/Hint}}\",\n            \"tags\": \"$:/tags/ViewToolbar\",\n            \"text\": \"<$button popup=<<tiddlerInfoState>> tooltip={{$:/plugins/danielo515/tiddlypouch/language/revisions/Hint}} aria-label={{$:/plugins/danielo515/tiddlypouch/language/revisions/Caption}} class=<<tv-config-toolbar-class>>>\\n<$action-setfield $tiddler=<<tiddlerInfoTabState>> text=\\\"$:/plugins/danielo515/tiddlypouch/ui/revisions\\\"/>\\n<$action-sendmessage $message=\\\"tm-tp-load-revisions\\\" $param=<<currentTiddler>>/>\\n<$list filter=\\\"[<tv-config-toolbar-icons>prefix[yes]]\\\">\\n{{$:/plugins/danielo515/tiddlypouch/images/revisions}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>prefix[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/plugins/danielo515/tiddlypouch/language/revisions/Caption}}/></span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/revisions/review-tabs\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/revisions/review-tabs\",\n            \"list-after\": \"$:/core/ui/ViewTemplate/title\",\n            \"tags\": \"$:/tags/ViewTemplate\",\n            \"text\": \"<$list filter=\\\"[prefix[$:/temp/revision:]suffix<currentTiddler>!field:title<currentTiddler>limit[1]]\\\" variable=\\\"ui-null\\\">\\n<$macrocall $name=\\\"revision-tabs\\\"\\ntabsList=\\\"[prefix[$:/temp/revision:]suffix<currentTiddler>]\\\"\\ndefault=<<currentTiddler>>\\nstate=\\\"$:/state/review/tabs\\\"\\nclass=\\\"tc-review-tabs\\\"\\ntemplate=\\\"$:/plugins/danielo515/tiddlypouch/ui/revisions/transclude-template\\\" />\\n</$list>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/revisions/styles\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/revisions/styles\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\\n\\n.tc-review-tabs {  \\n      line-height: 22px; \\n}\\n\\n/* avoid nested view template be moved */\\n.tc-review-tabs .tc-tiddler-frame {\\n    padding-top:0px;\\n    padding-bottom: 0px;\\n    margin-bottom: 0px;\\n    box-shadow: none;\\n    border: none;\\n}\\n\\n.tc-review-tabs .tc-titlebar {\\n    display: none;\\n}\\n\\n/* This block adjusts the margins inside the review tabs\\n   in the different breakpoints\\n*/\\n\\n@media (max-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}) {\\n    .tc-tab-set.tc-review-tabs{\\n        margin-left: -14px;\\n    }\\n}\\n\\n@media (min-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}) {\\n\\n    .tc-tab-set.tc-review-tabs{\\n        margin-left: -43px;\\n    }\\n\\n}\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/macros/revision-tabs\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/macros/revision-tabs\",\n            \"tags\": \"$:/tags/Macro\",\n            \"text\": \"\\\\define revision-tabs(tabsList,default,state:\\\"$:/state/tab\\\",class,template)\\n<$set name=\\\"tv-revisions-tab-state\\\" value=<<qualify \\\"$state$\\\">>>\\n<div class=\\\"tc-tab-set $class$\\\">\\n<div class=\\\"tc-tab-buttons $class$\\\">\\n<$button set=<<tv-revisions-tab-state>> setTo=<<currentTiddler>> default=\\\"$default$\\\" selectedClass=\\\"tc-tab-selected\\\" tooltip={{!!tooltip}}>\\n<$action-setfield $tiddler=<<folded-state>> text=\\\"show\\\"/>\\n<$set name=\\\"tv-wikilinks\\\" value=\\\"no\\\">\\n<!-- TODO: localization -->\\nCurrent\\n</$set></$button><!--\\nThis is the side by side DIFF tab\\n--><$button set=<<tv-revisions-tab-state>> setTo=\\\"Diff\\\" default=\\\"$default$\\\" selectedClass=\\\"tc-tab-selected\\\" tooltip=\\\"Side by side diff\\\">\\n<$action-setfield $tiddler=<<folded-state>> text=\\\"hide\\\"/>\\n<$set name=\\\"tv-wikilinks\\\" value=\\\"no\\\">\\nDiff\\n</$set></$button><!--\\n  All other loaded revisions tabs\\n--><$list filter=\\\"$tabsList$ -[<currentTiddler>]\\\" variable=\\\"currentTab\\\"><$set\\n  name=\\\"save-currentTiddler\\\"\\n  value=<<currentTiddler>>><$tiddler\\n    tiddler=<<currentTab>>><$button set=<<tv-revisions-tab-state>> setTo=<<currentTab>> default=\\\"$default$\\\" selectedClass=\\\"tc-tab-selected\\\" tooltip={{!!tooltip}}>\\n<$tiddler tiddler=<<save-currentTiddler>>>\\n<$action-setfield $tiddler=<<folded-state>> text=\\\"hide\\\"/>\\n<$set name=\\\"tv-wikilinks\\\" value=\\\"no\\\">\\n<$list filter=\\\"[<currentTab>removeprefix[$:/temp/revision:]removesuffix<currentTiddler>]\\\" variable=\\\"currentTab\\\">\\n<$macrocall $name=\\\"currentTab\\\" $type=\\\"text/plain\\\" $output=\\\"text/plain\\\"/>\\n</$list>\\n</$set></$tiddler></$button></$tiddler></$set></$list>\\n</div>\\n<div class=\\\"tc-tab-divider $class$\\\"/>\\n<div class=\\\"tc-tab-content $class$\\\">\\n<$list filter=\\\"$tabsList$\\\" variable=\\\"currentTab\\\">\\n\\n<$reveal type=\\\"match\\\" state=<<tv-revisions-tab-state>> text=<<currentTab>> default=\\\"$default$\\\">\\n\\n<$transclude tiddler=\\\"$template$\\\" mode=\\\"block\\\">\\n\\n<$transclude tiddler=<<currentTab>> mode=\\\"block\\\"/>\\n\\n</$transclude>\\n\\n</$reveal>\\n\\n</$list><!--\\n  This is the body of the DIFF tab. Should be here because otherwhise it moves the other tabs buttons\\n--><$reveal type=\\\"match\\\" state=<<tv-revisions-tab-state>> text=\\\"Diff\\\" default=\\\"$default$\\\">\\n\\n<$transclude tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/revisions/Diff\\\" mode=\\\"block\\\"/>\\n\\n</$reveal>\\n</div>\\n</div>\\n</$set>\\n\\\\end\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/revisions/transclude-template\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/revisions/transclude-template\",\n            \"text\": \"<!-- This template should be used with the tabs macro  -->\\n<$list filter=\\\"[is[current]!field:title<currentTab>]\\\">\\n  <div class=\\\"tc-tiddler-frame tc-revision-controls\\\">\\n  <$button>\\n    <$action-setfield $tiddler=<<currentTab>> title={{!!title}}/>\\n    Restore this revision\\n  </$button>\\n  <$transclude tiddler=\\\"$:/plugins/danielo515/tiddlypouch/ui/buttons/set-diff\\\"/>\\n  </div>\\n  <$tiddler tiddler=<<currentTab>>>\\n    <$transclude tiddler=\\\"$:/core/ui/ViewTemplate\\\"/>\\n  </$tiddler>\\n</$list>\\n\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/revisions\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/revisions\",\n            \"caption\": \"Revisions\",\n            \"tags\": \"$:/tags/TiddlerInfo\",\n            \"text\": \"<$button message=\\\"tm-tp-load-revisions\\\" param={{!!title}}>\\n    Reload revisions\\n</$button>\\n<table>\\n<$list filter=\\\"[{!!title}addprefix[$:/temp/revisions:]]\\\" variable=\\\"rev-store\\\">\\n    <$list filter=\\\"[<rev-store>indexes[]nsort[]]\\\" variable=\\\"index\\\">\\n        <$list filter=\\\"[<rev-store>getindex<index>]\\\" variable=\\\"revision\\\">\\n            <tr><td><$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n                <$action-sendmessage $message=\\\"tm-tp-load-certain-revision\\\" $param={{!!title}} revision=<<revision>>/>\\n                <$text text=<<revision>>/>\\n            </$button>\\n            </td></tr>\\n        </$list>\\n    </$list>\\n</$list>\\n</table>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/revisions/side-view\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/revisions/side-view\",\n            \"created\": \"20170611142115719\",\n            \"creator\": \"danielo515\",\n            \"modified\": \"20170611153258197\",\n            \"modifier\": \"danielo515\",\n            \"tags\": \"\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"<!-- This is just a template. It should be used to display different revisions of the same tiddler left and right -->\\n<$transclude tiddler=\\\"$:/core/ui/TiddlerFields\\\"/>\\n\\n<$list filter=\\\"[<currentTiddler>has[text]]\\\">\\n<$codeblock code={{!!text}} language={{!!type}}/>\\n</$list>\\n<$list filter=\\\"[<currentTiddler>!has[text]]\\\">\\n@@color:red;\\nThere is nothing to compare with\\n@@\\n</$list>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/macros/tabs-state\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/macros/tabs-state\",\n            \"tags\": \"$:/tags/Macro\",\n            \"text\": \"\\\\define tabs-state(tabsList,default,state:\\\"$:/state/tab\\\",class,template)\\n<div class=\\\"tc-tab-set $class$\\\">\\n<div class=\\\"tc-tab-buttons $class$\\\">\\n<$list filter=\\\"$tabsList$\\\" variable=\\\"currentTab\\\">\\n<$button set=<<tiddlerInfoTabState>> setTo=<<currentTab>> default=\\\"$default$\\\" selectedClass=\\\"tc-tab-selected\\\">\\n<$transclude tiddler=<<currentTab>> field=\\\"caption\\\">\\n<$macrocall $name=\\\"currentTab\\\" $type=\\\"text/plain\\\" $output=\\\"text/plain\\\"/>\\n</$transclude>\\n</$button>\\n</$list>\\n</div><div class=\\\"tc-tab-divider $class$\\\"/><div class=\\\"tc-tab-content $class$\\\">\\n<$list filter=\\\"$tabsList$\\\" variable=\\\"currentTab\\\">\\n\\n<$reveal type=\\\"match\\\" state=<<tiddlerInfoTabState>> text=<<currentTab>> default=\\\"$default$\\\">\\n\\n<$transclude tiddler=\\\"$template$\\\" mode=\\\"block\\\">\\n\\n<$transclude tiddler=<<currentTab>> mode=\\\"block\\\"/>\\n\\n</$transclude>\\n\\n</$reveal>\\n\\n</$list>\\n</div>\\n</div>\\n\\\\end\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/macros/navigate-to-controlPanel-tab\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/macros/navigate-to-controlPanel-tab\",\n            \"tags\": \"$:/tags/Macro\",\n            \"text\": \"\\\\define control-panel-tab(caption target)\\n<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n    <$action-setfield $tiddler=\\\"$:/state/tab-1749438307\\\" text=\\\"$target$\\\" />\\n    <$action-navigate $to=\\\"$:/ControlPanel\\\" />\\n    $caption$\\n</$button>\\n\\\\end\\n\\n\\\\define tiddlypouch-tab(caption target)\\n<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n    <$action-setfield $tiddler=\\\"$:/state/tab-1749438307\\\" text=\\\"$:/plugins/danielo515/tiddlypouch/ControlPanel\\\" />\\n    <$action-setfield $tiddler=\\\"$:/state/TiddlyPouch/tabs--1566775042\\\" text=\\\"$:/plugins/danielo515/tiddlypouch/ControlPanel/$target$\\\"/>\\n    <$action-navigate $to=\\\"$:/ControlPanel\\\" />\\n    <$text text=\\\"$caption$\\\"/>\\n</$button>\\n\\\\end\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/database-name\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/database-name\",\n            \"text\": \"<div class=\\\"tc-type-selector\\\">\\n<$edit-text tiddler=\\\"$:/plugins/danielo515/tiddlypouch/config/selected_database\\\" index=\\\"name\\\" tag=\\\"input\\\" default=\\\"\\\" focusPopup=<<qualify \\\"$:/state/TyddlyPouch/database-popup\\\">> class=\\\"tc-popup-handle\\\"/>\\n<$button popup=<<qualify \\\"$:/state/TyddlyPouch/database-popup\\\">> class=\\\"tc-btn-invisible tc-btn-dropdown\\\" tooltip=\\\"list existing databases\\\" aria-label=\\\"list existing databases\\\">{{$:/core/images/down-arrow}}</$button>\\n\\n\\n<div class=\\\"tc-block-dropdown-wrapper\\\">\\n<$reveal state=<<qualify \\\"$:/state/TyddlyPouch/database-popup\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n<div class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n<$list filter=\\\"[list[$:/plugins/danielo515/tiddlypouch/config/database_names]]\\\">\\n<div class=\\\"tc-dropdown-item\\\">\\n<$button class=\\\"tc-btn-invisible\\\" message=\\\"tm-TP-config-selectedDb\\\" param={{!!title}}>\\n<$text text={{!!title}}/>\\n</$button>\\n</div>\\n</$list>\\n</div>\\n</$reveal>\\n</div>\\n</div>\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/ui/config\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/ui/config\",\n            \"text\": \"/*\\\\\\ntype: application/javascript\\ntitle: $:/plugins/danielo515/tiddlypouch/ui/config\\nmodule-type: library\\n\\nLinks the user interface with the configuration methods\\n\\n@preserve\\n\\n\\\\*/\\n'use strict'; //@ts-check\\n\\n/*jslint node: true, browser: true */\\n\\n/*global $tw: false */\\n\\n/**\\n * @typedef {import('../startup/startup-config').tpouchConfig} tpouchConfig\\n */\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.setSyncFlag = setSyncFlag;\\nexports.handlers = void 0;\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nvar _require = require(\\\"$:/plugins/danielo515/tiddlypouch/constants.js\\\"),\\n    CONFIG_SAVED = _require.CONFIG_SAVED,\\n    SYNC_ICON = _require.SYNC_ICON,\\n    DATABASE_NAMES = _require.DATABASE_NAMES,\\n    DEBUG_CONFIG = _require.DEBUG_CONFIG,\\n    SELECTED_DATABASE = _require.SELECTED_DATABASE;\\n\\nvar Utils = require(\\\"$:/plugins/danielo515/tiddlypouch/utils\\\");\\n\\n$TPouch.ui = $TPouch.ui || {};\\n\\n$TPouch.ui.refresh = exports.refreshUI = function refreshUI(config) {\\n  updateDebugUI(config);\\n  refreshSelectedDbUi(config.databases[config.selectedDbId]);\\n  setSyncFlag();\\n  refreshDatabaseNamesUI();\\n  setLoginMessage();\\n  setSiteSubtitleToDatabaseName();\\n};\\n\\nfunction setSyncFlag(mode) {\\n  var syncStatusFlag = $tw.wiki.getTiddler(SYNC_ICON);\\n  /* Because I'm unsure about how to decide if we are in offline mode\\n    i can take both, a message param or just a plain function execution.\\n    take a look at startup-syncer for the emit of the events\\n  */\\n\\n  if (mode === 'offline' || !$TPouch.config.currentDB.getUrl()) {\\n    /* We don't want sync status icon on sidebar*/\\n    return $tw.wiki.addTiddler(new $tw.Tiddler(syncStatusFlag, {\\n      tags: []\\n    })); //Remove tags\\n  }\\n  /*Otherwise, add to sidebar with the tag (it could be removed) */\\n\\n\\n  $tw.wiki.addTiddler(new $tw.Tiddler(syncStatusFlag, {\\n    tags: ['$:/tags/PageControls']\\n  }));\\n}\\n\\nfunction setSiteSubtitleToDatabaseName() {\\n  var text = \\\"<<tiddlypouch-tab \\\".concat($TPouch.config.currentDB.name, \\\" Database >>\\\");\\n  $tw.wiki.addTiddler({\\n    title: '$:/SiteSubtitle',\\n    text: text\\n  });\\n}\\n/**\\n * Sets the message \\\"Login to <xxx>\\\" that is showed by tiddlywiki\\n * to remote URL of the current database.\\n */\\n\\n\\nfunction setLoginMessage() {\\n  var loginDestination = $TPouch.config.currentDB.getUrl();\\n  var databaseName = $TPouch.config.currentDB.getRemoteName();\\n  var message = \\\"Login to remote database <b>\\\".concat(databaseName, \\\"</b> at: \\\").concat(loginDestination);\\n  $tw.wiki.addTiddler({\\n    title: '$:/language/LoginToTiddlySpace',\\n    text: message\\n  });\\n}\\n\\nfunction refreshDatabaseNamesUI() {\\n  var namesList = $TPouch.config.getAllDBNames();\\n  $tw.wiki.addTiddler({\\n    title: DATABASE_NAMES,\\n    list: namesList,\\n    text: '{{!!list}}'\\n  });\\n}\\n\\nfunction tryParse(value) {\\n  try {\\n    return JSON.parse(value);\\n  } catch (err) {\\n    return value;\\n  }\\n}\\n/**\\n * Returns the fields of a tiddler as a POJO\\n * parsing values as needed (booleans, numbers, arrays...)\\n * @param {string} title the title of the tiddler\\n */\\n\\n\\nfunction getTiddlerFields(title) {\\n  var tiddler = $tw.wiki.getTiddler(title) || {\\n    fields: {}\\n  };\\n  var result = {};\\n  $tw.utils.each(tiddler.fields, function (val, key) {\\n    result[key] = tryParse(val);\\n  });\\n  return result;\\n}\\n\\nfunction updateDebug()\\n/**event */\\n{\\n  var rawConfig = getTiddlerFields(DEBUG_CONFIG); //@type { tpouchConfig }\\n\\n  var savedConfig = $TPouch.config.readConfigTiddler();\\n  savedConfig.debug = {\\n    active: rawConfig.debug,\\n    verbose: rawConfig.verbose\\n  };\\n  savedConfig.useFatTiddlers = rawConfig.useFatTiddlers;\\n  $TPouch.config.update(savedConfig);\\n}\\n\\n;\\n/**\\n *  Updates the debug ui to reflect the configuration\\n *\\n * @param {tpouchConfig} config\\n */\\n\\nfunction updateDebugUI(config) {\\n  $tw.wiki.addTiddler(new $tw.Tiddler({\\n    title: DEBUG_CONFIG,\\n    debug: JSON.stringify(config.debug.active),\\n    verbose: JSON.stringify(config.debug.verbose),\\n    useFatTiddlers: JSON.stringify(config.useFatTiddlers)\\n  }));\\n}\\n/**\\n * Updates the databases section of the stored configuration\\n * with new values for one database from the user interface.\\n * Note that the configuration being updated may not be the configuration of the currentDB,\\n * the user can select a DB different than the current one and save that config.\\n */\\n\\n\\nfunction updateDbConfig()\\n/**event */\\n{\\n  var uiConfig = $tw.wiki.getTiddlerData(SELECTED_DATABASE);\\n  var debugConfig = getTiddlerFields(DEBUG_CONFIG); //TODO: unify both configs and save them at once\\n  //@type { tpouchConfig }\\n\\n  var updateDescription = {\\n    // Instead of updating fields separately, we build an object describing just the new sections to add\\n    // and the update method will take care of updating the corresponding parts\\n    selectedDbId: uiConfig.name,\\n    useFatTiddlers: debugConfig.useFatTiddlers,\\n    databases: _defineProperty({}, uiConfig.name, Utils.plainToNestedObject(uiConfig))\\n  };\\n  $TPouch.config.update(updateDescription).then(function () {\\n    return $tw.rootWidget.dispatchEvent({\\n      type: CONFIG_SAVED,\\n      param: true\\n    });\\n  }); // when saved from UI, ask for a reboot\\n}\\n\\n;\\n/**\\n * Event handler that should be triggered when a database name is selected.\\n * It loads it's configuration and refreshes the UI with it.\\n */\\n\\nfunction databaseHasBeenSelected(event) {\\n  var dbName = event.param;\\n  var dbConfig = $TPouch.config.getDatabaseConfig(dbName);\\n  refreshSelectedDbUi(dbConfig);\\n}\\n\\n;\\n/**\\n * Refreshes the UI with the provided database configuration\\n *\\n * @param {remoteConfig} dbConfig\\n */\\n\\nfunction refreshSelectedDbUi(dbConfig) {\\n  //var dbInfo = config.databases[config.selectedDbId];\\n  var uiConfig = Utils.flattenObject(dbConfig);\\n  $tw.wiki.addTiddler(new $tw.Tiddler({\\n    title: SELECTED_DATABASE,\\n    type: 'application/json',\\n    text: JSON.stringify(uiConfig)\\n  }));\\n}\\n\\nvar handlers = {\\n  updateDbConfig: updateDbConfig,\\n  databaseHasBeenSelected: databaseHasBeenSelected,\\n  updateDebug: updateDebug\\n};\\nexports.handlers = handlers;\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/ui/config.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/danielo515/tiddlypouch/utils\": {\n            \"title\": \"$:/plugins/danielo515/tiddlypouch/utils\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/danielo515/tiddlypouch/utils\\ntype: application/javascript\\nmodule-type: library\\n\\nCollection of functions to help with some repetitive tasks.\\nIt is different from the utils created at startup, which are tiddlypoucyh focused\\nUtils here can be required for more granular use.\\n\\n@preserve\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n\\n/*global $tw: false */\\n'use strict';\\n/**\\n * @namespace utils\\n */\\n\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nvar isObject = function isObject(o) {\\n  return Object.prototype.toString.call(o) === '[object Object]';\\n}; // I am not writing a more general fn for performance reasons and because I don't need it!\\n\\n\\nvar bothAreObjects = function bothAreObjects(x, y) {\\n  return isObject(x) && isObject(y);\\n};\\n\\nvar extendOne = function extendOne(target, src) {\\n  for (var k in src) {\\n    if (!src.hasOwnProperty(k)) continue; //avoid traversing prototype chain\\n\\n    if (bothAreObjects(target[k], src[k])) {\\n      extendOne(target[k], src[k]);\\n      continue;\\n    }\\n\\n    if (isObject(src[k])) {\\n      // if source is an object we need to clone it to avoid modifying it\\n      target[k] = extendOne({}, src[k]);\\n      continue;\\n    }\\n\\n    target[k] = src[k];\\n  }\\n\\n  return target;\\n};\\n\\nvar extendDeep = function extendDeep(target) {\\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n    sources[_key - 1] = arguments[_key];\\n  }\\n\\n  return sources.reduce(extendOne, target);\\n};\\n\\nfunction saveAsJsonTiddler(title, data, beautify) {\\n  var formatParameters = beautify ? $tw.config.preferences.jsonSpaces : null;\\n  $tw.wiki.addTiddler(new $tw.Tiddler({\\n    title: title,\\n    type: 'application/json',\\n    text: JSON.stringify(data, null, formatParameters)\\n  }));\\n} // source: https://gist.github.com/gdibble/9e0f34f0bb8a9cf2be43\\n\\n\\nfunction flattenObject(ob) {\\n  var toReturn = {};\\n  var flatObject;\\n\\n  for (var i in ob) {\\n    if (!ob.hasOwnProperty(i)) {\\n      continue;\\n    }\\n\\n    if (_typeof(ob[i]) === 'object') {\\n      flatObject = flattenObject(ob[i]);\\n\\n      for (var x in flatObject) {\\n        if (!flatObject.hasOwnProperty(x)) {\\n          continue;\\n        }\\n\\n        toReturn[i + (!!isNaN(x) ? \\\".\\\".concat(x) : '')] = flatObject[x];\\n      }\\n    } else {\\n      toReturn[i] = ob[i];\\n    }\\n  }\\n\\n  return toReturn;\\n}\\n\\nfunction plainToNestedObject(plain) {\\n  var result = {};\\n  $tw.utils.each(plain, function (value, key) {\\n    createChilds(result, key.split('.'), value);\\n  });\\n  return result;\\n\\n  function createChilds(ob, keys, value) {\\n    keys = keys.slice(); // No side effects please\\n\\n    var lastKey = keys.pop(); // Pop is handy but mutates the array\\n\\n    var lastChild = keys.reduce(function (ob, k) {\\n      ob[k] = ob[k] || {};\\n      return ob[k];\\n    }, ob);\\n    lastChild[lastKey] = value;\\n    return ob;\\n  }\\n}\\n/**\\n * Translates true/false to yes/no\\n *\\n * @param {Boolean} value value to convert\\n * @returns {String} yes/no string\\n */\\n\\n\\nfunction boolToHuman(value) {\\n  return value ? 'yes' : 'no';\\n} // ===== EXPORTS =====\\n\\n\\nvar utils = {\\n  boolToHuman: boolToHuman,\\n  plainToNestedObject: plainToNestedObject,\\n  flattenObject: flattenObject,\\n  saveAsJsonTiddler: saveAsJsonTiddler,\\n  extendOne: extendOne,\\n  extendDeep: extendDeep,\\n  isObject: isObject\\n};\\nmodule.exports = utils; // for regular imports. Below is the Browser namespaced export.\\n\\n$TPouch.utils = extendOne($TPouch.utils || {}, utils); // we are using one of our functions to export our functions, wohooo\\n//# sourceMappingURL=./maps/danielo515/tiddlypouch/utils.js.map\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        }\n    }\n}"
  }
]